<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>Введение в Common Lisp для профессионалов Delphi/SQL</title>

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:14.2pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	page-break-after:avoid;
	font-size:18.0pt;
	font-family:Arial;
	letter-spacing:1.2pt;}
h2
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:Arial;}
h3
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:Arial;}
h4
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:14.2pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman";}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:14.2pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	text-indent:14.2pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-indent:14.2pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-indent:14.2pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:18.0pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:14.2pt;
	font-size:10.0pt;
	font-family:"Courier New";}
pre
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p.a, li.a, div.a
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:14.2pt;
	font-size:12.0pt;
	font-family:"Courier New";}
span.2
	{font-family:Arial;
	font-weight:bold;}
p.1, li.1, div.1
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
@page Section1
	{size:841.9pt 595.3pt;
	margin:57.55pt 2.0cm 57.55pt 2.0cm;}
div.Section1
	{page:Section1;}
@page Section2
	{size:841.9pt 595.3pt;
	margin:57.55pt 2.0cm 57.55pt 2.0cm;}
div.Section2
	{page:Section2;}
@page Section3
	{size:841.9pt 595.3pt;
	margin:57.55pt 2.0cm 57.55pt 2.0cm;}
div.Section3
	{page:Section3;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=RU link=blue vlink=purple>

<div class=Section1>

<p class=1>Введение в <span lang=EN-US>Common</span><span lang=EN-US> </span><span
lang=EN-US>Lisp</span> для профессионалов <span lang=EN-US>Delphi</span>/<span
lang=EN-US>SQL</span></p>

<p class=MsoNormal>Цель данного документа – дать направления поиска информации
и указать эффективные подходы к работе для профессиональных разработчиков,
начинающих работу с <span lang=EN-US>Common</span><span lang=EN-US> </span><span
lang=EN-US>Lisp</span>. Рассмотрена версия <span lang=EN-US>Lispworks</span>, кое-где
нестандартные возможности <span lang=EN-US>Lispworks</span><span lang=EN-US> </span>выделены
<span style='color:#339966'>зелёным</span>. Мои расширения выделены <span
style='color:blue'>синим цветом</span>. <span style='color:red'>Красным</span>
цветом выделены понятия, которые обязательно знать наизусть. Данный документ
написан в меру знаний и отражает личные предпочтения автора. </p>

<p class=MsoNormal>&nbsp;</p>

</div>

<b><span lang=EN-US style='font-size:16.0pt;font-family:Arial'><br clear=all
style='page-break-before:auto'>
</span></b>

<div class=Section2>

<p class=1><span lang=EN-US>Содержание</span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479844">Справочные
материалы и книги</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479845">Обозначения</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479846">Отличительные
особенности лиспа (по сравнению с Дельфи)</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479847">Сборка
мусора</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479848">Динамическая
разработка</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479849">Читатель/писатель</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479850">Макросы</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479851">Любимые
засады новичков</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479852">Отладчик
очень близко</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479853">Недопечатанные
формы</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479854">Стираем
подсказку и застреваем в строке ввода команды</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479855">Изучение
исходного текста в <span lang=EN-US>IDE</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479856">Списки.
Квазицитирование</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479857">Вид списка
на печати и в памяти</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479858">Работа со
списками в редакторе</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479859">Как создать
список. Квазицитирование</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479860">Переменные и
присваивание</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479861">Оператор
присваивания <span lang=EN-US>setf</span>, понятие места</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479862">Связывание и
присваивание, <span lang=EN-US>setf</span>, понятие места</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479863">Локальные
переменные</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479864">Глобальные
(специальные) переменные</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479865">Замыкания</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479866">Переменные и
типы</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479867">Управляющие
конструкции</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479868">Определение
и вызов функции, возврат значений, <span lang=EN-US>if</span>, циклы, локальные
функции, указатели на функции, <span lang=EN-US>try</span>..<span lang=EN-US>except</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479869"><span
lang=EN-US>try</span>..<span lang=EN-US>finally</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479870"><span
lang=EN-US>Overload</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479871">Организация
проекта. Файлы, пакеты, <span lang=EN-US>eval</span>-<span lang=EN-US>when</span>,
#., <span lang=EN-US>asdf</span>-системы, динамическая разработка</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479872">Определения
понятий</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479873">Таблица
аналогий</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479874">Динамическая
разработка, основные сценарии</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479875">Встроенные
типы данных</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479876">Символы</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479877">Списки</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479878">Массивы и
строки</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479879">Хеш-таблицы</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479880">Числа</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479881">Полиморфные
(родовые) функции, структуры и классы</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479882">Родовые
функции</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479883">Структуры</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479884">Классы</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479885"><span
lang=EN-US>eval</span> и макросы</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479886"><span
lang=EN-US>Eval</span></a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479887">Макросы</a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479888">Отладка</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479889">Три
отладчика: консольный, жук и степпер</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479890">Для отладки
поместите код в файл</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479891">Изучение
состояния программы в отладчике</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479892">Листенер во
время отладки</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479893">Разновидности
ошибок и их локализация</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479894">Трассировка
и отладка <span lang=EN-US>print-</span>ами</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479895">Остановы и
пошаговое исполнение</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479896"><span
lang=EN-US>Assert</span>, <span lang=EN-US>with</span>-<span lang=EN-US>the</span>1</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479897"><span
lang=EN-US>Unit</span>-тестирование</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479898">Профайлер</a></span></p>

<p class=MsoToc2><span class=MsoHyperlink><a href="#_Toc346479899">Трассировка <span
lang=EN-US>SQL</span></a></span></p>

<p class=MsoToc1><span class=MsoHyperlink><a href="#_Toc346479900">Контрольные
вопросы и практические задания</a></span></p>

<p class=MsoNormal></p>

</div>

<span style='font-size:12.0pt;font-family:"Times New Roman"'><br clear=all
style='page-break-before:always'>
</span>

<div class=Section3>

<h1><a name="_Toc346479844"></a><a name="_Toc346328119">Справочные материалы и
книги</a></h1>

<p class=MsoPlainText><b><span lang=EN-US><a
href="http://filonenko-mikhail.github.com/cltl2-doc/"><span lang=RU>Язык Common
Lisp Второе издание</span></a></span></b><b>  </b></p>

<p class=MsoPlainText>Стандарт <span lang=EN-US>Common</span><span lang=EN-US> </span><span
lang=EN-US>Lisp</span>, в удобочитаемой форме, около половины страниц
переведена на Русский</p>

<p class=MsoPlainText>&nbsp;</p>

<p class=MsoPlainText><b><span lang=EN-US><a
href="http://www.lispworks.com/documentation/lw50/CLHS/Front/">Common Lisp
Hyperspec<span style='font-weight:normal'> – </span><span lang=RU
style='font-weight:normal'>стандарт</span><span style='font-weight:normal'>
Common Lisp</span></a></span></b><span lang=EN-US> </span></p>

<p class=MsoPlainText>Обычно статьи из <span lang=EN-US>Hyperspec</span> доступны
в <span lang=EN-US>IDE</span> по нажатию горячей клавиши на имени функции</p>

<p class=MsoPlainText>&nbsp;</p>

<p class=MsoPlainText><a href="http://lisper.ru/pcl/">Книга «<b><span
lang=EN-US>Practical</span><span lang=EN-US> </span></b><b><span lang=EN-US>Common</span><span
lang=EN-US> </span></b><b><span lang=EN-US>Lisp</span></b>» в Русском переводе</a>
</p>

<p class=MsoPlainText>Хорошее практическое введение (более 400 страниц)</p>

<p class=MsoPlainText>&nbsp;</p>

<p class=MsoPlainText><b><a href="http://cl-cookbook.sourceforge.net/index.html"><span
lang=EN-US>The Common Lisp Cookbook</span></a></b></p>

<p class=MsoPlainText>Сборник коротких рецептов</p>

<h1><a name="_Toc346479845"></a><a name="_Toc346328120">Обозначения</a></h1>

<p class=MsoNormal>Красным цветом обозначены понятия, смысл которых нужно знать
наизусть. </p>

<h1><a name="_Toc346479846"></a><a name="_Toc346328121">Отличительные
особенности лиспа (по сравнению с Дельфи)</a></h1>

<h2><a name="_Toc346479847"></a><a name="_Toc346328122">Сборка мусора</a></h2>

<p class=MsoBodyTextIndent>В лиспе реализована сборка мусора. Любой объект, на
который нет ссылок с других объектов, считается мусором (в т.ч. объект с
кольцевыми ссылками внутри себя). Периодически выполнение останавливается и
запускается сборка мусора, в ходе которой ненужные объекты уничтожаются и их
память освобождается. Возможны слабые ссылки, которые не препятствуют
уничтожению объекта, на который ссылаются (после сборки мусора эти ссылки
становятся пустыми), а также финализаторы (специальные функции, которые
вызываются над объектом, который вот-вот будет уничтожен сборщиком мусора). </p>

<h2><a name="_Toc346479848"></a><a name="_Toc346328123">Динамическая разработка</a></h2>

<p class=MsoNormal style='text-indent:18.0pt'>Динамическая разработка –
ключевое преимущество лиспа, которое очень помогает в разработке. Как правило,
Лисп позволяет менять программу без её перезапуска, в этом он подобен <span
lang=EN-US>SQL</span>. </p>

<p class=MsoNormal><span lang=EN-US style='color:red'>defclass</span><span
lang=EN-US> </span>работает аналогично<span lang=EN-US> CREATE TABLE/ALTER
TABLE. </span>Он позволяет добавить поля в класс или удалить их, с обновлением
уже существующих экземпляров.</p>

<p class=MsoNormal><span lang=EN-US style='color:red'>defstruct</span><span
lang=EN-US style='color:red'> </span>переопределяет структуру, но при этом уже
существующие экземпляры становятся устарвешими (<span lang=EN-US>obsolete</span>)
и попытка обращения к ним вызывает ошибку. </p>

<p class=MsoNormal><span lang=EN-US style='color:red'>defun,</span><span
lang=EN-US> <span style='color:red'>defgeneric </span></span><span
style='color:red'>и</span><span lang=EN-US style='color:red'> defmethod </span>работают
аналогично<span lang=EN-US> CREATE OR ALTER PROCEDURE, </span>причём можно менять
набор параметров<span lang=EN-US>. </span>Если функция в данный момент
выполняется, будет продолжать выполняться старое тело. Независимо от этого, все
новые входы в данную функцию (в т.ч. рекурсивно из уже выполняющегося старого
тела) будут использовать новое тело. В отладчике в некоторых случаях можно
перезапустить уже выполняющуюся функцию, при этом будет вызвано новое тело с
теми же параметрами. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Также можно динамически создавать/менять
пространства имён (<span style='color:red'>пакеты</span>) <span lang=EN-US>defpackage</span>,
уничтожать их (<span lang=EN-US>delete</span>-<span lang=EN-US>package</span>),
включать и исключать идентификатор (<span style='color:red'>символ</span>) в/из
пространства имён. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Возможности динамического
изменения программы могут быть ограничены при сборке с оптимизациями.</p>

<p class=MsoNormal style='text-indent:18.0pt'>Также в Лиспе есть <span
lang=EN-US style='color:red'>listener</span>, который по своим возможностям
аналогичен интерактивному <span lang=EN-US>SQL</span>. <span lang=EN-US
style='color:red'>listener</span> позволяет немедленно выполнять вычисления, не
проходя цикл написания, сборки и запуска приложения. В отладчике, <span
lang=EN-US style='color:red'>listener</span><span lang=EN-US style='color:red'>
</span>позволяет работать со значениями локальных переменных на разных уровнях
стека. Это очень удобно для разработки, тестирования и отладке программы –
вместо запуска всей программы удобно запускать её отдельные функции. </p>

<h2><a name="_Toc346479849"></a><a name="_Toc346328124">Читатель/писатель</a></h2>

<p class=MsoNormal style='text-indent:18.0pt'>Читатель (начинка функции <span
lang=EN-US style='color:red'>read</span>) – это парсер. Другие примеры парсеров
– парсеры <span lang=EN-US>XML</span>, <span lang=EN-US>JSON</span>, <span
lang=EN-US>dfm</span>. Также существует парсер <span lang=EN-US>Object</span><span
lang=EN-US> </span><span lang=EN-US>Pascal</span> в <span lang=EN-US>Delphi</span>,
который строит из текста дерево разбора. В <span lang=EN-US>Delphi</span> это
дерево недоступно для пользователя, оно используется только внутри компилятора
для генерации машинного кода. В Лиспе дерево, получающееся в результате работы
парсера, доступно пользователю. В этом смысле читатель Лиспа больше похож на
парсер <span lang=EN-US>dfm</span>, <span lang=EN-US>XML</span> или <span
lang=EN-US>JSON</span>, который разбирает данные, а не код. Особенности работы
читателя:</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>форматом ввода являются <span lang=EN-US>S</span>-выражения (скобки,
точки, атомы и др.). Скобки и точки отвечают за группировку данных в деревья.
Атомы являются листьями деревьев.</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>идентификаторы программы являются атомами. При их считывании они
отражаются как специальные структуры данных типа <span style='color:red'>символ</span>.
Когда идентификатор встречается в программе первый раз за время жизни
программы, создаётся символ с таким именем. При последующих чтениях того же
идентификатора в дерево вставляется ссылка на уже имеющийся символ. </p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>также можно задать формат для ввода объектов произвольных типов.</p>

<p class=MsoNormal style='text-indent:18.0pt'>Читатель может использоваться как
для ввода исходного текста программы, так и для ввода произвольных данных из
текстового формата. Разница – не в структуре этих данных, а в том, что с ними в
дальнейшем делается. Поэтому говорят, что в Лиспе код=данные, что также обозначается
словом <i><span lang=EN-US>homoiconicity</span></i>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-indent:18.0pt'>Писатель – это начинка функции <span
lang=EN-US style='color:red'>print</span>. <span lang=EN-US>Print</span><span
lang=EN-US> </span>печатает в текстовый поток любой объект, причём можно
настраивать печать своих и некоторых встроенных типов. Можно считать функцию <span
lang=EN-US>print</span> расширяемым аналогом функции <span lang=EN-US>write</span>
из Дельфи. Строки, числа, символы, списки, массивы, структуры, <span
style='color:blue'>хеш-таблицы</span> имеют формат вывода по умолчанию, при
котором выводится содержимое этих объектов. Для классов метод печати по
умолчанию не печатает содержимое объекта.</p>

<p class=MsoNormal style='text-indent:18.0pt'>Читатель и писатель согласованы. Во
многих случаях, если писатель что-то написал, то читатель может прочитать
написанное и построить &quot;такой же&quot; объект, либо вернуть ссылку на тот
же самый объект, который ранее был напечатан. Те объекты, которые нельзя
прочитать, по соглашению должны печататься так: #&lt;какой-то текст&gt;. При
попытке читателя прочитать это представление возникает ошибка. Также писатель
может отказаться печатать слишком длинные или глубоко вложенные списки (это
настраивается), тогда часть списка будет заменена многоточием и при попытке его
чтения также возникнет ошибка. </p>

<p class=MsoNormal style='text-indent:18.0pt'>&nbsp;</p>

<p class=MsoNormal style='text-indent:18.0pt'>С помощью <span lang=EN-US>print</span>/<span
lang=EN-US>read</span><span lang=EN-US> </span>возможен ввод-вывод данных с
циклическими ссылками.</p>

<p class=MsoNormal style='text-indent:18.0pt'>Отметим, что есть другой способ
сохранения данных с возможностью последующего восстановления - в
скомпилированных файлах. </p>

<h2><a name="_Toc346479850"></a><a name="_Toc346328125">Макросы</a></h2>

<p class=MsoNormal style='text-indent:18.0pt'>Макросы делают компилятор
расширяемым и позволяют создавать новые конструкции языка. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Могущество макросов основано на
порядке сборке программы на лиспе. Программа собирается в порядке: запустили
программу, скомпилировали внутри этой программы модуль, прилинковали его (к уже
работающей программе), скомпилировали следующий и т.п. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Макросы - механизм, позволяющий
строить код во время компиляции, используя для преобразования кода вызовы ранее
определённых функций. Например, на макросах можно сделать препроцессор <span
lang=EN-US>SQL</span>, который проверяет правильность встроенного в программу
запроса во время компиляции программы. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Макросы часто представляют из
себя шаблоны, в которых большая часть постоянна и лишь некоторая, специально
выделенная часть подставляется. Такие шаблоны похожи на списки, а операция
подстановки называется <span style='color:red'>квазицитирование. </span></p>

<h1><a name="_Toc346479851"></a><a name="_Toc346328126">Любимые засады новичков</a></h1>

<p class=MsoNormal>При работе в <span lang=EN-US style='color:red'>listener</span>
легко сбиться с толку. Чтобы это случалось не слишком часто, нужно понимать
следующие вещи:</p>

<h2><a name="_Toc346479852"></a><a name="_Toc346328127">Отладчик очень близко</a></h2>

<p class=MsoNormal>Обычно подсказка <span lang=EN-US>listener</span> выглядит
как <span lang=EN-US>CL</span>-<span lang=EN-US>USER</span><span lang=EN-US> </span><span
lang=EN-US>NN</span> &gt; , где <span lang=EN-US>NN</span> – возрастающий
порядковый номер, который увеличивается на 1 после каждого ввода. Попробуем
ввести в <span lang=EN-US>listener</span> выражение (/ 1 0). Мы увидим
следующее:</p>

<p class=MsoNormal><span lang=EN-US>Error: Division-by-zero caused by / of (1
0).</span></p>

<p class=MsoNormal>...</p>

<p class=MsoNormal><span lang=EN-US>CL-USER NN : 1 &gt; </span></p>

<p class=MsoNormal>Суффикс : 1 говорит, что мы находимся в отладчике. Об этом
же говорит то, что на панели инструментов стала доступна кнопка с изображением
жука (бага). Нажав на неё, мы попадём в графический отладчик, в нём увидим стек
и т.д. Данное окно графического отладчика будет связано с окном <span
lang=EN-US>listener</span>, хотя это не видно. </p>

<p class=MsoNormal>Подсказка отладчика мало чем отличается от обычной подсказки
листенера не только по виду, но и по возможностям: в ней также можно проводить
произвольные вычисления, как и в обычной подсказке. Это очень хорошо (в <span
lang=EN-US>Delphi</span> так нельзя), но это может сильно сбивать с толку.</p>

<p class=MsoNormal>Попробуем теперь снова ввести (/ 1 0) в окне <span
lang=EN-US>listener</span>. Подсказка изменится:</p>

<p class=MsoNormal><span lang=EN-US>CL-USER NN : 2 &gt; </span></p>

<p class=MsoNormal>двойка говорит о том, что мы находимся в отладчике
рекурсивно, и уровень вложенности отладчиков равен двум. В окне графического
отладчика можно видеть, что функции / и <span lang=EN-US>error</span>
присутствуют в стеке дважды. </p>

<p class=MsoNormal>Теперь можно (в окне <span lang=EN-US>listener</span>)
набрать :<span lang=EN-US>a</span> и &lt;<span lang=EN-US>Enter</span>&gt; (или
<span lang=EN-US style='color:blue'>Ctrl</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>D</span>) - это примерно то же, что бросить
исключение <span lang=EN-US>EAbort</span>. Выпадем обратно в первый уровень
отладчика. Набрав :<span lang=EN-US>a</span> &lt;<span lang=EN-US>Enter</span>&gt;
ещё раз, вернёмся в нормальное состояние интерпретатора. Во время :<span
lang=EN-US>a</span> защитный код (аналог <span lang=EN-US>finally</span>)
выполняется, как и при обычном выполнении программы. Поэтому, если мы
&quot;упали&quot; в отладчик в каком-то месте, выход из отладчика по :<span
lang=EN-US>a</span> является безопасным (хотя, конечно, всё зависит от
конкретной ошибки и ситуации).</p>

<p class=MsoNormal>Данный отладчик, хоть и не даёт возможности пошагового
исполнения (эта возможность предоставляется отдельным средством – степпером),
обладает другими очень полезными возможностями, во многом мы терпим лисп ради
них. Помимо возможности вычисления произвольных выражений в контексте
программы, отладчик обычно предлагает один или несколько
&quot;перезапусков&quot; (<span lang=EN-US>restarts</span>), например,
попробовать вычисление ещё раз, вернуть другое значение вместо вызвавшего
ошибку и т.п. Рестарты нужно читать и использовать. </p>

<p class=MsoNormal>Для более серьёзной отладки используется графический
отладчик (жук), который можно вызвать из консольного с помощью иконки н панели
управления. О нём см. ниже.</p>

<h2><a name="_Toc346479853"></a><a name="_Toc346328128">Недопечатанные формы</a></h2>

<p class=MsoNormal>В листенере можно вводить многострочные команды. Команда
считается завершённой, когда вы ввели полную форму, в которой все скобки,
кавычки и т.п. закрыты, и после этого нажали <span lang=EN-US>Enter</span>. </p>

<p class=MsoNormal>Строковый литерал (строка в кавычках) также может быть
многострочной. Как понять, находится ли листенер в состоянии чтения команды или
вычисления? После запуска команды на выполнение её текст окрашивается в красный
цвет. Если есть сомнения, всегда можно нажать <span lang=EN-US>Ctrl</span>-<span
lang=EN-US>Break</span><span lang=EN-US> </span>(или на вот такой кирпич <img
border=0 width=43 height=57 src="lisp-tutorial.files/image001.jpg">) и
посмотреть на стек. Также есть диспетчер процессов, <span lang=EN-US>works</span>/<span
lang=EN-US>tools</span>/<span lang=EN-US>process</span><span lang=EN-US> </span><span
lang=EN-US>browser</span>, но не забудьте после открытия нажать <span
lang=EN-US>F</span>5 для обновления состояния. </p>

<p class=MsoNormal>Другие сведения о локализации ошибок см. в разделе об
отладке. </p>

<h2><a name="_Toc346479854"></a><a name="_Toc346328129">Стираем подсказку, застреваем
в строке </a>ввода команды</h2>

<p class=MsoNormal>Можно спокойно стереть подсказку &quot;&gt;&quot; листенера
и тогда будет вообще непонятно, завис ли <span lang=EN-US>Listener</span><span
lang=EN-US> </span>и что с ним случилось. Вы будете писать какие-то команды,
нажимать <span lang=EN-US>Enter</span><span lang=EN-US> </span>и ничего не
будет происходить. В случае любых недоразумений жмите <span lang=EN-US>Ctrl</span>-<span
lang=EN-US>Break</span><span lang=EN-US> </span>и затем :<span lang=EN-US>a</span>.
Это, как правило, помогает.</p>

<p class=MsoNormal>При определённых условиях (вводе разного рода команд) курсор
может &quot;застрять&quot; в строчке ввода команды, располагающейся внизу
экрана (она называетя <span lang=EN-US>minibuffer</span>). Если Вы не знаете,
зачем туда попали, жмите <span lang=EN-US>ESC</span>, пока не отпустит, а затем
нажмите стрелку вниз, чтобы сбросить набранные в отчаянии лишние нажатия <span
lang=EN-US>ESC</span>.</p>

<h1><a name="_Toc346328130"></a><a name="_Toc346479855"></a><a
name="_Toc346328142">Изучение исходного текста</a> в <span lang=EN-US>IDE</span></h1>

<p class=MsoNormal>В загруженной программе, <span lang=EN-US>Alt</span>-. показывает
определение переменной, ф-ии, класса, родовой ф-ии, макроса и многих других
объектов. <span lang=EN-US>Works</span>/<span lang=EN-US>Tools</span>/<span
lang=EN-US>System</span><span lang=EN-US> </span><span lang=EN-US>browser</span><span
lang=EN-US> </span>показывает системы (в т.ч. <span lang=EN-US>asdf</span>). <span
lang=EN-US>Works</span>/<span lang=EN-US>Tools</span>/<span lang=EN-US>Symbol</span><span
lang=EN-US> </span><span lang=EN-US>browser</span><span lang=EN-US> </span>позволяет
искать символы по части названия (то же делает и <span lang=EN-US>apropos</span>).
</p>

<h1><a name="_Toc346479856">Списки. Квазицитирование</a></h1>

<h2><a name="_Toc346479857"></a><a name="_Toc346328131">Вид списка на печати и
в памяти</a></h2>

<p class=MsoBodyTextIndent>Список выглядит в тексте так:</p>

<p class=a>( элемент1 элемент2 ... элемент<span lang=EN-US>N</span> )</p>

<p class=MsoBodyTextIndent>Внутри список (1 2 3 4) представляет из себя
кособокое дерево объектов типа <span lang=EN-US>cons</span>: (картинка отсюда <a
href="http://eli.thegreenplace.net/2007/08/10/sicp-section-221/">http://eli.thegreenplace.net/2007/08/10/sicp-section-221/</a></p>

<p class=MsoBodyTextIndent><img border=0 width=217 height=88
src="lisp-tutorial.files/image002.jpg"></p>

<p class=MsoBodyTextIndent>Т.е, наиболее быстрые операции над списком – это
операции над его первым элементом, а доступ к произвольному элементу имеет
сложность <span lang=EN-US>O</span>(<span lang=EN-US>length</span>(<span
lang=EN-US>x</span>)) Разные списки могут иметь общий хвост.</p>

<h2><a name="_Toc346479858"></a><a name="_Toc346328132">Работа со списками в
редакторе</a></h2>

<p class=MsoBodyTextIndent>Исходный текст по большей части представляет из себя
печатную форму списков (и преобразуется в списки на этапе чтения программы из
файла исходника), поэтому очень важно уметь работать с ними в редакторе. Над
списками доступны команды: </p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'><span
style='color:red'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:red'>переход от закрывающей к открывающей
скобке и обратно</span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='color:red'>удаление списка до или после курсора в буфер
обмена</span> (<span lang=EN-US>kill</span>)</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style='color:red'>переход на следующий/предыдущий список</span> и
на список верхнего уровня</p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>перестановка двух списков перед курсором</p>

<p class=MsoNormal style='text-indent:18.0pt'>Для изучения этих команд можно
открыть любой файл с исходным текстом в редакторе.   </p>

<p class=MsoNormal style='text-indent:18.0pt'>Также можно отметить, что
редактор подсвечивает парную скобку и раскрашивает скобки в разные цвета. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Поскольку синтаксис лиспа
неудобный, при работе важную роль играют отступы. <span lang=EN-US>IDE</span>
автоматически выставляет отступы, для этого после нажатия <span lang=EN-US>Enter</span>
при начале новой строки нужно также нажимать <span lang=EN-US>Tab</span>. Также
есть команда <span lang=EN-US>Alt</span>-. <span lang=EN-US>indent</span><span
lang=EN-US> </span><span lang=EN-US>form</span>, которая выравнивает целое
определение (нужно стоять в начале определения). </p>

<h2><a name="_Toc346479859"></a><a name="_Toc346328133">Как создать список</a>.
Квазицитирование</h2>

<p class=MsoNormal style='text-indent:18.0pt'>Чтобы создать новый список в <span
lang=EN-US style='color:red'>listener</span>-е, можно написать:</p>

<p class=a><span lang=EN-US>&gt; '(a &quot;b&quot; a 123)</span></p>

<p class=a><span lang=EN-US>(a &quot;b&quot; a 123) ; это напечатает листенер</span></p>

<p class=MsoNormal style='text-indent:18.0pt'>Здесь мы построили <span
style='color:red'>список</span> из четырёх элементов. Первый и третий элементы
идентичны – это символ с именем &quot;A&quot;. Второй элемент – строка &quot;<span
lang=EN-US>b</span>&quot;, четвёртый – число 123. Лисп печатает результат нашей
работы. Мы использовали одиночную кавычку - &quot;цитирование&quot;, чтобы
листенер не воспринял нашу команду как вызов функции <span lang=EN-US>a</span>.
Через некоторое время наш список может стать мусором, т.к. мы его ничему не
присвоили, а символ с именем &quot;А&quot; останется, т.к. при чтении он
автоматически попал в текущее пространство имён.</p>

<p class=MsoNormal style='text-indent:18.0pt'>Двухуровневый список можно
построить так:</p>

<p class=a><span lang=EN-US>&gt; '(a (a)) </span></p>

<p class=MsoNormal style='text-indent:18.0pt'>Он будет содержать две ссылки на
тот же самый символ с именем &quot;<span lang=EN-US>A</span>&quot;.</p>

<p class=MsoNormal style='text-indent:18.0pt'>Здесь второй элемент списка –
список из одного элемента (символа с именем &quot;<span lang=EN-US>A</span>&quot;).
</p>

<p class=MsoNormal style='text-indent:18.0pt'>Другой способ построения такого
же списка:</p>

<p class=a><span lang=EN-US>&gt; (list 'a &quot;b&quot; 'a (+ 120 3))</span></p>

<p class=MsoNormal style='text-indent:18.0pt'>Здесь для построения используется
функция <span lang=EN-US>list</span>. Эта функция вычисляет все свои аргументы
и составляет из них свежий список. Последний аргумент – это вычисление
выражения 120+3=123. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Третий способ:</p>

<p class=a>&gt; `(<span lang=EN-US>a</span> &quot;<span lang=EN-US>b</span>&quot;
<span lang=EN-US>a</span> ,<b>(+ 120 3)</b>) </p>

<p class=MsoBodyTextIndent>Здесь применено квазицитирование. Апостроф означает,
что следующее за ним лисп-выражение – это шаблон. Данные в шаблоне не
вычисляются. Но если в шаблоне встречается запятая или &quot;,@&quot; , то
следующее выражение – подставляемое, оно вычисляется. Данная конструкция чем-то
аналогична функциям форматного вывода и её можно смоделировать в Дельфи так:</p>

<p class=MsoNormal style='text-indent:18.0pt'><span lang=EN-US>format('(a,''b'',a,%d)',[120+3])</span></p>

<p class=MsoNormal style='text-indent:18.0pt'>Отличие состоит в том, что в
Дельфи эта конструкция работает со строками, а в Лиспе – с деревьями. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Шаблоны и обычные цитаты могут
быть вложенными и могут быть вложены друг в друга.</p>

<h1><a name="_Toc346479860"></a><a name="_Toc346328134">Переменные</a> и
присваивание</h1>

<h2><a name="_Toc346479861"></a><a name="_Toc346328135">Оператор присваивания </a><span
lang=EN-US>setf</span>, понятие места</h2>

<p class=MsoNormal><span lang=EN-US style='color:red'>setf</span> – это
присваивание, оно вполне аналогично := в <span lang=EN-US>Delphi</span>. </p>

<h2><a name="_Toc346328136"></a><a name="_Toc346479862">Связывание и
присваивание, </a><span lang=EN-US>setf</span>, понятие места</h2>

<p class=MsoNormal>Связывание - это одновременное объявление и инициализация
переменной. </p>

<p class=MsoNormal>Присваивание - то же самое, что := в <span lang=EN-US>Delphi</span>.
То, чему можно присваивать, называется <span style='color:red'>место</span> (<span
lang=EN-US style='color:red'>place</span>). В частности, местами являются имена
переменных, элементы списков и массивов, подстроки строк, значения хеш-таблиц,
соответствующие определённому ключу и т.п. Можно определить новые виды мест.
Общий вид присваивания: </p>

<p class=MsoNormal><span style='font-family:"Courier New"'>(</span><span
lang=EN-US style='font-family:"Courier New";color:red'>setf</span><span
style='font-family:"Courier New"'> место1 значение1 ... место</span><span
lang=EN-US style='font-family:"Courier New"'>N</span><span style='font-family:
"Courier New"'> значение</span><span lang=EN-US style='font-family:"Courier New"'>N</span><span
style='font-family:"Courier New"'>)</span></p>

<h2><a name="_Toc346479863">Локальные переменные</a></h2>

<p class=MsoNormal style='text-indent:18.0pt'>Локальные переменные полностью
аналогичны локальным переменным <span lang=EN-US>Delphi</span>, но есть
следующие отличия:</p>

<p class=MsoNormal style='text-indent:18.0pt'>В Дельфи переменные определяются
до слова <span lang=EN-US>begin</span> с помощью слова <span lang=EN-US>var</span>,
в Лиспе они определяются внутри тела функции с помощью разнообразных
конструкций (<span lang=EN-US>let</span>, <span lang=EN-US>destructuring</span>-<span
lang=EN-US>bind</span>, <span lang=EN-US>multiple</span>-<span lang=EN-US>value</span>-<span
lang=EN-US>bind</span><span lang=EN-US> </span><span style='color:blue'>(</span><span
lang=EN-US style='color:blue'>mlvl</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>bind</span><span style='color:blue'>)</span>, <span
lang=EN-US>with</span>-<span lang=EN-US>open</span>-<span lang=EN-US>file</span>
и т.п.) и их область действия – до закрывающей скобки этой конструкции. Возможно
несколько одноимённых переменных внутри одной функции на разных уровнях
вложенности - внутренние затеняют внешние. </p>

<h2><a name="_Toc346479864"></a><a name="_Toc346328137">Глобальные
(специальные) переменные</a></h2>

<p class=MsoBodyTextIndent>В Лиспе глобальные переменные очень полезны и они
интенсивно применяются, например, для сбора данных при рекурсивном обходе
какого-либо дерева или для хранения разного рода режимов работы.</p>

<p class=MsoBodyTextIndent>Основная особенность работы с глобальными
переменными: когда такой переменной делается <span lang=EN-US>let</span>, локальная
переменная с таким именем НЕ создаётся. Вместо этого, происходит связывание
глобальной переменной. Именно, старое значение глобальной переменной запоминается
и временно заменяется на новое. Теперь, во всех функциях, будет видно значение,
заданное <span lang=EN-US>let</span>. Последующие <span lang=EN-US>setf</span><span
lang=EN-US> </span>могут его менять. После выхода из области действия <span
lang=EN-US>let</span>, ранее запомненное в момент выполнения <span lang=EN-US>let</span><span
lang=EN-US> </span>значение восстанавливается. Пример работы в однопоточном
приложении:</p>

<p class=MsoBodyTextIndent>&nbsp;</p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>(defparameter *glob* </span><span
  style='font-size:10.0pt'>1</span><span lang=EN-US style='font-size:10.0pt'>)</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'> </span></p>
  <p class=a><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span style='font-size:10.0pt'>(</span><span lang=EN-US
  style='font-size:10.0pt;color:red'>progn</span><span lang=EN-US
  style='font-size:10.0pt;color:red'> </span><span style='font-size:10.0pt'>;
  составной оператор, то же, что </span><span lang=EN-US style='font-size:10.0pt'>begin</span><span
  style='font-size:10.0pt'>..</span><span lang=EN-US style='font-size:10.0pt'>end</span><span
  style='font-size:10.0pt'>;<span style='color:red'> </span></span></p>
  <p class=a><span style='font-size:10.0pt'>   </span><span lang=EN-US
  style='font-size:10.0pt'>(let ((*glob* 2))</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>      (format t
  &quot;связана в ~S&quot; *glob*)</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>      (setf *glob* 3)</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>      (format t
  &quot;после setf ~S&quot; *glob*)</span></p>
  <p class=a><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span style='font-size:10.0pt'>   )</span></p>
  <p class=a><span style='font-size:10.0pt'>   (</span><span lang=EN-US
  style='font-size:10.0pt'>format</span><span lang=EN-US style='font-size:10.0pt'>
  </span><span lang=EN-US style='font-size:10.0pt'>t</span><span
  style='font-size:10.0pt'> &quot;после выхода из </span><span lang=EN-US
  style='font-size:10.0pt'>let</span><span style='font-size:10.0pt'> ~</span><span
  lang=EN-US style='font-size:10.0pt'>S</span><span style='font-size:10.0pt'>&quot;
  *</span><span lang=EN-US style='font-size:10.0pt'>glob</span><span
  style='font-size:10.0pt'>*)</span></p>
  <p class=a>)</p>
  <p class=a>&nbsp;</p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>var</span><span
  lang=EN-US style='font-size:10.0pt'> </span><span lang=EN-US
  style='font-size:10.0pt'>glob</span><span style='font-size:10.0pt'>:</span><span
  lang=EN-US style='font-size:10.0pt'>integer</span><span style='font-size:
  10.0pt'>=1; </span></p>
  <p class=a><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>var saveGlob:integer;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>begin</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>try </span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>  saveGlob:=glob;
  glob:=2;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>  writeln(format('</span><span
  style='font-size:10.0pt'>связана</span><span style='font-size:10.0pt'> </span><span
  style='font-size:10.0pt'>в</span><span lang=EN-US style='font-size:10.0pt'>
  %d',[glob]));</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>  glob:=3;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>  writeln(format('</span><span
  style='font-size:10.0pt'>после</span><span lang=EN-US style='font-size:10.0pt'>
  := %d',[glob]));</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>finally</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>  glob:=saveGlob;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>  end;</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>writeln</span><span
  style='font-size:10.0pt'>(</span><span lang=EN-US style='font-size:10.0pt'>format</span><span
  style='font-size:10.0pt'>('после выхода из </span><span lang=EN-US
  style='font-size:10.0pt'>let</span><span style='font-size:10.0pt'>'</span><span
  lang=EN-US style='font-size:10.0pt'>,[glob]);</span></p>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>end.</span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyTextIndent>&nbsp;</p>

<p class=MsoBodyTextIndent>Если используемая в функции переменная не определена
в ней, компилятор предполагает, что она глобальна и выдаёт предупреждение. </p>

<p class=MsoBodyTextIndent>Однако, если вы связываете имя глобальной
переменной, думая, что она локальная, это может вызвать проблемы. Поэтому нужно
следовать такому безопасному сценарию работы с глобальными переменными:</p>

<p class=MsoBodyTextIndent>1. переменная создаётся с помощью <span lang=EN-US
style='color:red'>defparameter</span> (или с помощью <span lang=EN-US
style='color:red'>defvar</span>, если переменная должна быть инициализирована
только один раз за жизнь программы)</p>

<p class=MsoBodyTextIndent>2. Имя переменной должно быть окружено звёздочками,
*<span lang=EN-US>my</span>-<span lang=EN-US>variable</span>*.</p>

<p class=MsoBodyTextIndent>3. Приложение должно собираться без предупреждений
&quot;variable ... <span lang=EN-US>assumed</span><span lang=EN-US> </span><span
lang=EN-US>special</span>&quot;. В частности, глобальная переменная должна быть
объявлена по течению процесса сборки до любого её использования.</p>

<h3><a name="_Toc346328138">Многонитевые приложения</a></h3>

<p class=MsoBodyTextIndent>В многонитевом (многопоточном, <span lang=EN-US>multi</span>-<span
lang=EN-US>thread</span>) приложении принципиально возможно два режима работы с
глобальной переменной. У переменной есть общее для всех нитей глобальное
значение. Оно действует в тех нитях, где переменная не связана с помощью <span
lang=EN-US style='color:red'>let</span>. Присваивание с помощью <span
lang=EN-US>setf</span><span lang=EN-US> </span>в одной такой нити меняет её
значение во всех остальных, т.е., она ведёт себя как <span lang=EN-US>var</span><span
lang=EN-US> </span>в <span lang=EN-US>Delphi</span>. Такая переменная является
потокобезопасной и не вернёт мусор, если её значение меняется в другой нити в
момент чтения. </p>

<p class=MsoBodyTextIndent> Когда переменная в данной нити связана с помощью <span
lang=EN-US style='color:red'>let</span>, общее между нитями глобальное значение
не меняется. Вместо этого она на время действия <span lang=EN-US>let</span>
получает в данной нити отдельное глобальное значение, видное только этой нити (как
<span lang=EN-US>threadvar</span><span lang=EN-US> </span>в <span lang=EN-US>Delphi</span>).
При вложенных связываниях в этой же нити, или при присваиваниях во время
действия <span lang=EN-US>let</span><span lang=EN-US> </span>меняется только отдельное
глобальное значение, видимой в этой нити, остальные нити не затрагиваются этим
изменением. </p>

<p class=MsoBodyTextIndent>Таким образом, связывание изолирует глобальную
переменную от других нитей. </p>

<p class=MsoBodyTextIndent>Можно установить перечень переменных, которые будут
связаны для каждой новой нити при её создании, см. <span style='color:#339966'>mp:*process-initial-bindings*</span>,
и их начальных значений. </p>

<p class=MsoBodyTextIndent>Узнать, связана ли переменная, можно в отладчике (жуке),
включив меню <span lang=EN-US>view</span>/<span lang=EN-US>bindings</span>.
Либо можно искать имя переменной во всех исходных текстах и смотреть, что с ней
происходит. При этом нужно помнить, что <span lang=EN-US>let</span><span
lang=EN-US> </span>является не единственной конструкцией связывания.</p>

<h2><a name="_Toc346479865"></a><a name="_Toc346328139">Замыкания</a></h2>

<p class=MsoNormal style='text-indent:18.0pt'>Генератор анонимных функций <span
lang=EN-US style='color:red'>lambda</span><span lang=EN-US> </span>имеет два
аспекта. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Во-первых, при каждом выполнении
он возвращает новую функцию без имени. </p>

<p class=MsoNormal style='text-indent:18.0pt'>Во-вторых, эта функция может
ссылаться на локальные переменные, существующие там, где вызван оператор <span
lang=EN-US>lambda</span>, при этом, время жизни локальных переменных
продлевается на весь период жизни функции, созданной <span lang=EN-US>lambda</span>.
</p>

<p class=MsoNormal style='text-indent:18.0pt'>Замыкания реализованы в <span
lang=EN-US>Delphi</span> 2009, хотя автору неизвестно, насколько полноценна их
реализация. </p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=475 valign=top style='width:356.4pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'><pre><span lang=EN-US style='font-size:9.0pt'>type</span></pre><pre><span
  lang=EN-US style='font-size:9.0pt'>  TProc = reference to function(x: Integer): function;</span></pre><pre><span
  lang=EN-US style='font-size:9.0pt'>&nbsp;</span></pre><pre><span lang=EN-US
  style='font-size:9.0pt'>function Foo(a: Integer): TProc;</span></pre><pre><span
  lang=EN-US style='font-size:9.0pt'>begin</span></pre><pre><span lang=EN-US
  style='font-size:9.0pt'>  Foo := function(b: Integer): Integer;</span></pre><pre><span
  lang=EN-US style='font-size:9.0pt'>  begin</span></pre><pre><span lang=EN-US
  style='font-size:9.0pt'>    Result := a + b;</span></pre><pre><span
  lang=EN-US style='font-size:9.0pt'>  end;     </span></pre>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>end;</span></p>
  </td>
  <td width=511 valign=top style='width:382.9pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(defun
  Foo (a) </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>   
  (lambda (b)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>     
  </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>       
  (+ a b)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>       
  )</span></p>
  <pre><span style='font-size:9.0pt'>)</span></pre></td>
 </tr>
</table>

<h2><a name="_Toc346328140"></a><a name="_Toc346479866">Переменные и типы</a></h2>

<p class=MsoNormal>Переменные в лиспе обычно не типизированы (имеют тип <span
lang=EN-US>t</span>, что означает &quot;любой объект&quot;), хотя можно сделать
их типизированными с помощью <span lang=EN-US>declare</span><span lang=EN-US> </span>или
<span lang=EN-US style='color:blue'>with</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>the</span><span style='color:blue'>1. </span>В
этом случае тип значения будет проверяться на соответствие, если только проверка
не отключена в компиляторе. Автоматическое преобразование типов в лиспе не
применяется. Узнать тип объекта можно с помощью (<span lang=EN-US>type</span>-<span
lang=EN-US>of</span><span lang=EN-US> </span>объект). Узнать тип переменной
стандарт не позволяет, автор пользуется <span lang=EN-US style='color:blue'>budden</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>tools</span><span
style='color:blue'>::</span><span lang=EN-US style='color:blue'>variable</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>type</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>or</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>class</span><span
lang=EN-US> </span>(см. применения в библиотеке). Также есть <span lang=EN-US
style='color:#339966'>hcl</span><span style='color:#339966'>:</span><span
lang=EN-US style='color:#339966'>variable</span><span style='color:#339966'>-</span><span
lang=EN-US style='color:#339966'>information</span>, но она почему-то не
показывает тип. </p>

<p class=MsoNormal>Работа с нетипизированными переменными в лиспе может
показаться похожей на работу с типом <span lang=EN-US>variant</span> в <span
lang=EN-US>Delphi</span>, но это не так. При работе с типом <span lang=EN-US>variant</span>
происходят автоматические преобразования типов (например, можно превратить
числовой вариант в строку и наоборот), а лисп этого не делает. Преобразования
типов в лиспе всегда являются явными (например, <span lang=EN-US
style='color:red'>coerce</span><span style='color:red'>, </span><span
lang=EN-US style='color:red'>prin</span><span style='color:red'>1-</span><span
lang=EN-US style='color:red'>to</span><span style='color:red'>-</span><span
lang=EN-US style='color:red'>string</span><span style='color:red'>, </span><span
lang=EN-US style='color:red'>read</span><span style='color:red'>-</span><span
lang=EN-US style='color:red'>from</span><span style='color:red'>-</span><span
lang=EN-US style='color:red'>string</span><span style='color:red'>, </span><span
lang=EN-US style='color:red'>parse-integer, string</span>)</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Toc346479867">Управляющие конструкции</a></h1>

<h2><a name="_Toc346479868">Определение и вызов функции, возврат значений, </a><span
lang=EN-US>if</span>, циклы, локальные функции, указатели на функции, <span
lang=EN-US>try</span>..<span lang=EN-US>except</span></h2>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>Delphi</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>CL</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>function
  f(s:string;o:TObject):string;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>begin;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>s:=s+s;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>result:=s+o.ClassName;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>end;</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(defun
  f (s o)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (setf s (<span style='color:blue'>str+</span> 'string s s))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (<span style='color:blue'>str++</span> 'string local-s (type-of o))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  )</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>; составные
  объекты (массивы, структуры, экземпляры </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>; классов)
  передаются в функции так же, как объекты </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>; в </span><span
  lang=EN-US style='font-size:10.0pt'>Delphi</span><span style='font-size:10.0pt'>.
  При модифицирующих операциях со строками </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>; меняется
  исходная строка</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>procedure
  p(var o:TObject);</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>begin</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>o:=someOtherObject;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>end;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>p(x);</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>для</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>возврата</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>нескольких</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>значений</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>из</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>функции</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>можно</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>использовать</span><span
  style='font-size:10.0pt'> <span lang=EN-US style='color:red'>values</span><span
  lang=EN-US> </span></span><span style='font-size:10.0pt'>и</span><span
  style='font-size:10.0pt'> <span lang=EN-US style='color:red'>multiple-value-bind</span><span
  lang=EN-US>. </span></span><span style='font-size:10.0pt'>Для произвольных
  действий с переменной можно использовать макрос. Имитация </span><span
  lang=EN-US style='font-size:10.0pt'>var</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>параметра в </span><span
  lang=EN-US style='font-size:10.0pt;color:blue'>budden-tools:</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(defun
  p (o)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (<span style='color:blue'>with-byref-params </span>(o)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  (setf o someOtherObject)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  )</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(p
  (<span style='color:blue'>byref</span> x))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>If
  j=0 then result:=0 else result:=j+4;</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(if
  (= j 0) 0 (+ 4 j))  ; if </span><span style='font-size:10.0pt'>возвращает</span><span
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>значение</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>if a=1 then </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  writeln('</span><span style='font-size:
  10.0pt;font-family:"Courier New"'>один</span><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New"'>')</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>else if a=2 then</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  writeln('</span><span style='font-size:
  10.0pt;font-family:"Courier New"'>два</span><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New"'>')</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>else </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  writeln('</span><span style='font-size:
  10.0pt;font-family:"Courier New"'>много</span><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New"'>');</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span style='font-size:10.0pt;
  font-family:"Courier New"'>&nbsp;</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(<span
  style='color:red'>cond</span></span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  ((= a 1) </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  (print &quot;</span><span style='font-size:10.0pt'>один</span><span
  lang=EN-US style='font-size:10.0pt'>&quot;))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  ((= a 2)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  (print &quot;</span><span style='font-size:10.0pt'>два</span><span
  lang=EN-US style='font-size:10.0pt'>&quot;))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (t</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>  
  (print &quot;</span><span style='font-size:10.0pt'>много</span><span
  lang=EN-US style='font-size:10.0pt'>&quot;)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>   ) ; тоже
  возвращает значение, в отличие от </span><span lang=EN-US style='font-size:
  10.0pt'>Delphi</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>for i:=0 to N-1 do</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  if i=5 then continue;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  if i=7 then break;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  writeln(i);</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  end</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>(</span><span
  lang=EN-US style='font-size:10.0pt'>dotimes</span><span style='font-size:
  10.0pt'> (</span><span lang=EN-US style='font-size:10.0pt'>i</span><span
  lang=EN-US style='font-size:10.0pt'> </span><span lang=EN-US
  style='font-size:10.0pt'>N</span><span style='font-size:10.0pt'>) ; только от
  0 до </span><span lang=EN-US style='font-size:10.0pt'>N</span><span
  style='font-size:10.0pt'>-1! </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>   </span><span
  lang=EN-US style='font-size:10.0pt'>(when (= i 5) (go :continue))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>  
  (when (= i 7) (return nil))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>  
  (print i)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>  
  :continue)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>ЛИБО </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>(</span><span
  lang=EN-US style='font-size:10.0pt;color:blue'>iter</span><span lang=EN-US
  style='font-size:10.0pt;color:blue'> </span><span style='font-size:10.0pt'>;
  мощнее, но хуже поддерживается отладчиком</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>  </span><span
  lang=EN-US style='font-size:10.0pt'>(:for i :from 0 :to (- N 1))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (:when (= i 5) (:next-iteration))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (:when (= i 7) (return nil))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  )</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>while i&gt;j do</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  inc(i,-1);</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(loop</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (unless (&gt; i j) </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>    
  (return nil))</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>  (</span><span
  lang=EN-US style='font-size:10.0pt'>incf</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span lang=EN-US style='font-size:10.0pt'>i</span><span
  style='font-size:10.0pt'> –1)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>  )</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>ИЛИ </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>(</span><span
  lang=EN-US style='font-size:10.0pt;color:blue'>iter</span><span lang=EN-US
  style='font-size:10.0pt;color:blue'> </span><span style='font-size:10.0pt'>;
  мощнее, но хуже поддерживается отладчиком</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt;
  color:blue'>  </span><span lang=EN-US style='font-size:10.0pt'>(:while (&gt;
  i j))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (incf i –1)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  )</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>procedure outer; //</span><span
  style='font-size:10.0pt;font-family:"Courier New"'> пример локальной функции</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  var v:variant;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  procedure inner;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  v:=v+1;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  end</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>begin{procedure outer}</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>v:=0;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>inner;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>end;</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(defun
  outer ()</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt;
  color:blue'>  </span><span lang=EN-US style='font-size:10.0pt'>(let ((v 0))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  (flet ((inner ()</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>             
  (incf v)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>              
  ))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>      
  (inner)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>      
  )))</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>ЛИБО</span><span
  lang=EN-US style='font-size:10.0pt'> </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(defun
  outer ()</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>  (</span><span
  lang=EN-US style='font-size:10.0pt;color:blue'>proga</span><span
  style='font-size:10.0pt'> ; нестандартно, эквивалентно предыдущему,</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>         ;
  но меньше скобок и хуже поддерживается отладч.</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>     (</span><span
  lang=EN-US style='font-size:10.0pt'>let</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span lang=EN-US style='font-size:10.0pt'>v</span><span
  style='font-size:10.0pt'> 0)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>    
  (flet inner ()</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>       
  (incf v))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>    
  (inner)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>    
  ))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>    
  </span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>try</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  op1; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  op2;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>except</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  on E1:class1 do</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    writeln(E1.message);</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    op4;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    end</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  on E2:class2 do</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    raise;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>    end</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  end;</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(handler-case</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (progn</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  op1</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  op2)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (class1 (e1)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  (princ e1)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  op4</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
  )</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'> 
  (class2 (e2)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>    (</span><span
  lang=EN-US style='font-size:10.0pt'>error</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span lang=EN-US style='font-size:10.0pt'>e</span><span
  style='font-size:10.0pt'>2)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>    )</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>  ) ; </span><i><span
  style='font-size:6.0pt'>ну вот, заодно и сам узнал</span></i><span
  style='font-size:10.0pt'>   </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>// </span><span style='font-size:10.0pt;
  font-family:"Courier New"'>указатели на функции</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>var</span><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New"'> </span><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New"'>myFunc</span><span
  style='font-size:10.0pt;font-family:"Courier New"'>:</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>  function(x,y:integer):integer</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span style='font-size:10.0pt;
  font-family:"Courier New"'>  =@</span><span lang=EN-US style='font-size:10.0pt;
  font-family:"Courier New"'>namedFunction</span><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New"'> </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  10.0pt;font-family:"Courier New"'>result:=myFunc(1,2);</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(let
  ((myfunc #'namedFunction)) </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>(funcall
  'myfunc 1 2))</span></p>
  </td>
 </tr>
</table>

<h2><a name="_Toc346479869"></a><a name="_Toc346328141"></a><a
name="_Ref346327512"><span lang=EN-US>try</span></a>..<span lang=EN-US>finally</span></h2>

<p class=MsoBodyTextIndent>Обычно, если нужно совершить какую-то очистку
действия при выходе (даже аварийном) из функции, в Дельфи используется <span
lang=EN-US>try</span>..finally. </p>

<p class=MsoBodyTextIndent>В Лиспе для этого используется аналогичная
конструкция, <span lang=EN-US style='color:red'>unwind</span><span
style='color:red'>-</span><span lang=EN-US style='color:red'>protect</span>,
но, благодаря наличию макросов, можно сделать конструкцию очень лаконичной.
Например, если определить</p>

<p class=a>&nbsp;</p>

<p class=a><span lang=EN-US>(<span style='color:red'>defmacro</span>
with-guarded-x ((var &amp;rest args) &amp;body body)</span></p>

<p class=a><span lang=EN-US>  `(let ((,var (create-x ,@args)))</span></p>

<p class=a><span lang=EN-US>     (unwind-protect</span></p>

<p class=a><span lang=EN-US>       (progn ,@body)</span></p>

<p class=a><span lang=EN-US>       (clear-x ,var)</span></p>

<p class=a><span lang=EN-US>       )))</span></p>

<p class=MsoNormal style='text-indent:0cm'>то вызов</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span lang=EN-US style='font-family:"Courier New"'>(with-guarded-x
(a arg1 arg2) </span></p>

<p class=MsoNormal style='margin-left:35.4pt;text-indent:35.4pt'><span
lang=EN-US style='font-family:"Courier New"'>(do-somehing-1)</span></p>

<p class=MsoNormal style='margin-left:70.8pt;text-indent:0cm'><span lang=EN-US
style='font-family:"Courier New"'>(do-something-2))</span></p>

<p class=MsoNormal style='text-indent:18.0pt'><span lang=EN-US
style='font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoBodyTextIndent style='text-indent:0cm'>при компиляции развернётся в</p>

<p class=MsoBodyTextIndent>&nbsp;</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>(let ((a (create-x arg1
  arg2)))</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>  (unwind-protect</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>     (progn </span></p>
  <p class=a><span style='font-size:9.0pt'>       </span><span lang=EN-US
  style='font-size:9.0pt'>(do-somehing-1) </span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>     </span><span
  style='font-size:9.0pt'>  (</span><span lang=EN-US style='font-size:9.0pt'>do-something-2)</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>       )</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>    (clear-x a)</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>   ))</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>var a:x;</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>begin</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>a:=x.create(arg1,arg2);</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>try</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>  doSomething1;</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>  doSomething2;</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>finally</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>  freeAndNil(a);</span></p>
  <p class=a><span lang=EN-US style='font-size:9.0pt'>  end;</span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyTextIndent>Если нить исполнения (поток, процесс) убивается с
помощью <span style='color:#339966'>mp:process-kill</span>, то ресурсы не будут
освобождены до тех пор, пока объект не попадёт под сборку мусора, а это может
занять неопределённое время. Для освобождения ресурсов в этой ситуации нужно
использовать <span style='color:#339966'>mp:ensure-process-cleanup</span></p>

<h2><a name="_Toc346479870"><span lang=EN-US>Overload</span></a></h2>

<p class=MsoNormal>Вместо <span lang=EN-US>overload</span><span lang=EN-US> </span>есть
другие, более мощные инструменты<span lang=EN-US>:</span></p>

<p class=MsoNormal>1. Родовые функции. В отличие от Дельфовых <span lang=EN-US>overload</span>,
лисповые родовые функции смотрят не на тип формального параметра, а на тип
фактического параметра, т.е.выбор того или иного варианта <span lang=EN-US>overload</span><span
lang=EN-US> </span>происходит не во время компиляции, а во время выполнения. Более
подробно описаны в главе про ООП. </p>

<p class=MsoNormal>2. Необязательные параметры &amp;<span lang=EN-US>optional</span>,
ключи &amp;<span lang=EN-US>key</span>, получение всех параметров в виде списка
<span lang=EN-US>&amp;rest</span>. Синтаксис вызова функции лиспа примерно
соответствует синтаксису команды операционной системы. Параметры в конце могут
быть не заданы и они заменяются умолчаниями. Также могут быть заданы параметры
ключи, например: </p>

<p class=MsoNormal>&nbsp;</p>

<p class=a><span lang=EN-US>(position #\b &quot;Abc&quot; :test 'char-equal)</span></p>

<p class=MsoNormal>- использован параметр-ключ :test со значением 'char-equal. </p>

<h1><a name="_Toc346479871"></a><a name="_Toc346328143">Организация проекта.
Файлы, пакеты, </a><span lang=EN-US>eval</span>-<span lang=EN-US>when</span>,
#., <span lang=EN-US>asdf</span>-системы, динамическая разработка</h1>

<p class=MsoBodyTextIndent>Структура проекта и процесс загрузки приложения на
Лиспе гораздо сложнее, чем на Дельфи, поскольку:</p>

<p class=MsoBodyTextIndent>- в Дельфи мало что можно поменять во время
выполнения, а в Лиспе можно поменять почти всё</p>

<p class=MsoBodyTextIndent>- понятие модуля в Дельфи являются монолитными, а в
Лиспе оно разделено на несколько понятий</p>

<p class=MsoBodyTextIndent>- многое из того, что  в Дельфи делается автоматически,
в Лиспе нужно делать руками. </p>

<h2><a name="_Toc346479872"></a><a name="_Toc346328144">Определения понятий</a></h2>

<p class=MsoBodyTextIndent>Файл *.<span lang=EN-US>lisp</span><span lang=EN-US>
</span>– аналог *.<span lang=EN-US>pas</span></p>

<p class=MsoBodyTextIndent>Файл *.<span lang=EN-US>ofasl</span> – аналог *.<span
lang=EN-US>dcu</span>. Могут размещаться в разных экзотических местах, см. эти
места при компиляции или ищите поиском по диску. </p>

<p class=MsoBodyTextIndent>Пакет – пространство имён (перечень имён, допустимых
в определённом контексте, который может меняться во время выполнения).</p>

<p class=MsoBodyTextIndent><span lang=EN-US>eval</span>-<span lang=EN-US>when</span>
– аналог {$<span lang=EN-US>if</span><span lang=EN-US> </span>файлКомпилируется}
... {$<span lang=EN-US>elseif</span><span lang=EN-US> </span>файлЗагружается}
... {$<span lang=EN-US>endif</span>}, позволяет выполнять тот или иной код на
этапе компиляции и/или загрузки уже скомпилированного файла. </p>

<p class=MsoBodyTextIndent>#. – позволяет выполнять код в момент чтения текста
программы из файла (до компиляции).</p>

<p class=MsoBodyTextIndent><span lang=EN-US>asdf</span>-система – аналог файла
проекта или <span lang=EN-US>makefile</span>. Типичная программа содержит
множество взаимосвязанных систем <span lang=EN-US>asdf</span>, каждая из
которых имеет свой каталог и определение в файле *.<span lang=EN-US>asd</span>.
</p>

<p class=MsoBodyTextIndent>Динамическая разработка – возможность менять код
программы без её остановки. </p>

<p class=MsoBodyTextIndent style='text-indent:0cm'><span class=2><span
style='font-size:16.0pt'>&nbsp;</span></span></p>

<p class=MsoBodyTextIndent style='text-indent:0cm'><a name="_Toc346479873"></a><a
name="_Toc346328145"><span class=2><span style='font-size:16.0pt'>Таблица
аналогий</span></span></a></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>Delphi</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>CL</span></p>
  <p class=a><span style='font-size:10.0pt'>&nbsp;</span></p>
  </td>
 </tr>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>*</span><span
  lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>.dpr</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-size:10.0pt'>Скрипт загрузки, с помощью которого
  «голая» лисп-система превращается в программу (мы ещё не рассматриваем </span><span
  lang=EN-US style='font-size:10.0pt'>save</span><span style='font-size:10.0pt'>-</span><span
  lang=EN-US style='font-size:10.0pt'>image</span><span style='font-size:10.0pt'>,
  но это в другой раз). Содержит инструкции по компиляции и загрузке всей
  системы. </span></p>
  </td>
 </tr>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>unit</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-size:10.0pt'>1. </span><span lang=EN-US
  style='font-size:10.0pt'>unit</span><span lang=EN-US style='font-size:10.0pt'>
  </span><span style='font-size:10.0pt'>как единица сборки – файл, включённого
  в </span><span lang=EN-US style='font-size:10.0pt'>asdf</span><span
  style='font-size:10.0pt'>-систему или просто загружаемого из скрипта загрузки.
  </span></p>
  <p class=a><span style='font-size:10.0pt'>2. </span><span lang=EN-US
  style='font-size:10.0pt'>unit</span><span lang=EN-US style='font-size:10.0pt'>
  </span><span style='font-size:10.0pt'>как пространство имён – пакет</span></p>
  </td>
 </tr>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>interface,
  implementation</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US style='font-size:10.0pt'>interface</span><span
  style='font-size:10.0pt'> - внешние символы пакета (обычно – в файле каталогСистемы/</span><span
  lang=EN-US style='font-size:10.0pt'>package</span><span style='font-size:
  10.0pt'>.</span><span lang=EN-US style='font-size:10.0pt'>lisp</span><span
  style='font-size:10.0pt'>, иногда – в файле исходного текста, форма </span><span
  lang=EN-US style='font-size:10.0pt;color:red'>defpackage</span><span
  style='font-size:10.0pt'>, </span><span lang=EN-US style='font-size:10.0pt;
  color:blue'>def</span><span style='font-size:10.0pt;color:blue'>-</span><span
  lang=EN-US style='font-size:10.0pt;color:blue'>merge</span><span
  style='font-size:10.0pt;color:blue'>-</span><span lang=EN-US
  style='font-size:10.0pt;color:blue'>packages</span><span style='font-size:
  10.0pt;color:blue'>::!</span><span style='font-size:10.0pt'>). Перечислены
  только имена сущностей, но не их типы.</span></p>
  <p class=a><span style='font-size:10.0pt'>Сами сущности (функции, макросы,
  типы, переменные) определены в исходном тексте без разбивки на </span><span
  lang=EN-US style='font-size:10.0pt'>interface</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>и </span><span
  lang=EN-US style='font-size:10.0pt'>implementation</span></p>
  </td>
 </tr>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>uses</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-size:10.0pt'>Если рассматривать </span><span
  lang=EN-US style='font-size:10.0pt'>unit</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>как единицу
  сборки, то зависимости указываются в </span><span lang=EN-US
  style='font-size:10.0pt'>asdf</span><span lang=EN-US style='font-size:10.0pt'>
  </span><span style='font-size:10.0pt'>– системе. При неправильном порядке
  сборки, как правило, будут ошибки или предупреждения, а в худшем случае –
  молчаливая неправильная работа. </span></p>
  <p class=a><span style='font-size:10.0pt'>Если рассматривать </span><span
  lang=EN-US style='font-size:10.0pt'>unit</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>как набор
  допустимых имён, то зависимости указываются в форме определения пакета (:</span><span
  lang=EN-US style='font-size:10.0pt'>use</span><span style='font-size:10.0pt'>,
  :</span><span lang=EN-US style='font-size:10.0pt'>import</span><span
  style='font-size:10.0pt'>-</span><span lang=EN-US style='font-size:10.0pt'>from</span><span
  style='font-size:10.0pt'>). Но можно и без этого вызывать функцию из другого
  пространства имён с помощью префикса, главное, что символ должен существовать
  на момент чтения файла</span></p>
  </td>
 </tr>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>initialization</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-size:10.0pt'>Любые формы, записанные в исходном
  тексте файла .</span><span lang=EN-US style='font-size:10.0pt'>lisp</span><span
  style='font-size:10.0pt'>, выполняются во время загрузки (за исключением </span><span
  lang=EN-US style='font-size:10.0pt'>eval</span><span style='font-size:10.0pt'>-</span><span
  lang=EN-US style='font-size:10.0pt'>when</span><span style='font-size:10.0pt'>).</span></p>
  <p class=a><span style='font-size:10.0pt'>Даже определение функции является
  не просто декларацией, а командой лисп-системе «в момент загрузки создай
  такую-то функцию». </span></p>
  <p class=a><span style='font-size:10.0pt'>Нужно учитывать, что в Дельфи
  сначала компилируется вся программа, а только потом запускается </span><span
  lang=EN-US style='font-size:10.0pt'>initialization</span><span lang=EN-US
  style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>первого
  модуля. В Лиспе, как правило, порядок действий другой: компиляция </span><span
  lang=EN-US style='font-size:10.0pt'>f</span><span style='font-size:10.0pt'>1.</span><span
  lang=EN-US style='font-size:10.0pt'>lisp</span><span style='font-size:10.0pt'>
  (если он требует перекомпиляции) – загрузка </span><span lang=EN-US
  style='font-size:10.0pt'>f</span><span style='font-size:10.0pt'>1.</span><span
  lang=EN-US style='font-size:10.0pt'>ofasl</span><span style='font-size:10.0pt'>,
  компиляция </span><span lang=EN-US style='font-size:10.0pt'>f</span><span
  style='font-size:10.0pt'>2.</span><span lang=EN-US style='font-size:10.0pt'>lisp</span><span
  style='font-size:10.0pt'>, загрузка </span><span lang=EN-US style='font-size:
  10.0pt'>f</span><span style='font-size:10.0pt'>2.</span><span lang=EN-US
  style='font-size:10.0pt'>ofasl</span><span style='font-size:10.0pt'> и т.п. При
  этом, для компиляции </span><span lang=EN-US style='font-size:10.0pt'>f</span><span
  style='font-size:10.0pt'>2.</span><span lang=EN-US style='font-size:10.0pt'>lisp</span><span
  lang=EN-US style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>могут
  использоваться символы, функции и данные, определённые в </span><span
  lang=EN-US style='font-size:10.0pt'>f</span><span style='font-size:10.0pt'>1.</span><span
  lang=EN-US style='font-size:10.0pt'>lisp</span><span style='font-size:10.0pt'>.
  Про функции из </span><span lang=EN-US style='font-size:10.0pt'>f</span><span
  style='font-size:10.0pt'>3.</span><span lang=EN-US style='font-size:10.0pt'>lisp</span><span
  lang=EN-US style='font-size:10.0pt'> </span><span style='font-size:10.0pt'>система
  в этот момент ещё и не подозревает.</span></p>
  </td>
 </tr>
 <tr>
  <td width=175 valign=top style='width:131.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US style='font-size:10.0pt;font-family:"Courier New"'>finalization</span></p>
  </td>
  <td width=811 valign=top style='width:607.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-size:10.0pt'>отсутствует, хотя можно задавать
  действия на уровне системы при выгрузке с помощью <span style='color:#339966'>lispworks:define-action</span></span></p>
  </td>
 </tr>
</table>

<h3><a name="_Toc346328146">Что должно входить в файл *.</a><span lang=EN-US>lisp</span></h3>

<p class=MsoBodyTextIndent>В файле <b>*.</b><b><span lang=EN-US>lisp</span><span
lang=EN-US> </span></b>обязательно должна быть (в начале) форма (<span
lang=EN-US>in</span>-<span lang=EN-US>package</span> :имяПространстваИмён),
которая задаёт пространство имён этого файла. Само пространство имён может быть
определено в другом месте, но иногда оно определяется в самом файле. Тогда
форма (<span lang=EN-US>in</span>-<span lang=EN-US>package</span> ...) должна
идти после определения пакета, а само определение рекомендуется делать с
помощью <span lang=EN-US style='color:blue'>def</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>merge</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>packages</span><span style='color:blue'>::!</span>
с :<span lang=EN-US>always</span><span lang=EN-US> </span><span lang=EN-US>t</span>.
</p>

<p class=MsoBodyTextIndent><span style='color:blue'>Также</span><span
style='color:blue'> </span><span style='color:blue'>должна</span><span
style='color:blue'> </span><span style='color:blue'>быть</span><span
style='color:blue'> </span><span style='color:blue'>форма</span><span
lang=EN-US style='color:blue'> (in-readtable :buddens-readtable-a), </span><span
style='color:blue'>причём</span><span lang=EN-US style='color:blue'>, </span><span
style='color:blue'>символ</span><span lang=EN-US style='color:blue'>
EDITOR-HINTS.NAMED-READTABLES:IN-READTABLE) </span><span style='color:blue'>должен</span><span
style='color:blue'> </span><span style='color:blue'>быть</span><span
style='color:blue'> </span><span style='color:blue'>доступен</span><span
style='color:blue'> </span><span style='color:blue'>в</span><span
style='color:blue'> </span><span style='color:blue'>данном</span><span
style='color:blue'> </span><span style='color:blue'>пространстве</span><span
style='color:blue'> </span><span style='color:blue'>имён</span><span
lang=EN-US style='color:blue'>. </span><span style='color:blue'>Желательна
также форма </span><span lang=EN-US style='color:blue'>(asdf::of-system :</span><span
style='color:blue'>система). </span></p>

<p class=MsoBodyTextIndent>Во время чтения файла при компиляции могут возникать
новые символы. Такие символы будут добавляться в заданный пакет в качестве
внутренних (неэкспортированных). </p>

<p class=MsoBodyTextIndent>Файл *.<span lang=EN-US>asd</span><span lang=EN-US> </span>здесь
не описан, см. примеры. </p>

<h2><a name="_Toc346479874"></a><a name="_Toc346328147">Динамическая разработка,
основные сценарии</a></h2>

<p class=MsoBodyTextIndent>Динамическая разработка есть в <span lang=EN-US>SQL</span>
(<span lang=EN-US>create</span>/<span lang=EN-US>alter</span>/<span lang=EN-US>drop</span><span
lang=EN-US> </span><span lang=EN-US>table</span>, <span lang=EN-US>procedure</span><span
lang=EN-US> </span>и т.п.). В Лиспе она по сути, такая же по смыслу – можно
менять отдельные объекты. </p>

<h3><a name="_Toc346328148">Работа</a> в <span lang=EN-US style='color:red'>listener</span><span
lang=EN-US> (REPL)</span></h3>

<p class=MsoBodyTextIndent>В <span lang=EN-US>listener</span><span lang=EN-US> </span>можно
выполнять практически любые действия, например, создавать и вызывать функции,
определять классы, изучать данные. Последнее возвращённое выражение в листенере
печатает, далее можно нажать на микроскоп (<span lang=EN-US>Inspect</span>) и
просмотреть внутреннюю структуру объекта, это особенно важно для классов,
содержимое которых не видно на печати. </p>

<h3><a name="_Toc346328149">Разработка по одной форме в файле</a></h3>

<p class=MsoBodyTextIndent>В <span lang=EN-US>listener</span><span lang=EN-US> </span>хорошо
отлаживать фрагменты программы и программировать факториалы. При
&quot;настоящем&quot; программировании, для нового логически связанного
фрагмента программы сразу создают новый файл. Файл сначала создаётся согласно
пункту «что должно входить в файл *.<span lang=EN-US>lisp</span>», см. чуть
выше. Далее в него вносят определения функций и с помощью команды <span
lang=EN-US>Compile</span><span lang=EN-US> </span><span lang=EN-US>defun</span>
(<span lang=EN-US>f</span>7) компилируют их по одному. Смотрят на
предупреждения. Каждое определение можно проверить в листенере, при этом
желательно предварительно сделать в нём команду (<span lang=EN-US>in</span>-<span
lang=EN-US>package</span><span lang=EN-US> </span>:тотЖеПакет), чтобы было
меньше путаницы. При перекомпиляции сущности ведут себя так:</p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>Сущность</p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>Как ведёт себя</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>функция (<span lang=EN-US>defun)</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>сразу вступает в действие.
  Все другие функции будут вызывать её. Если функция находится на стеке,
  продолжит выполняться старое тело до выхода. Рекурсивные вызовы будут
  вызывать новое тело. Но! Всё это может не работать при включенных
  оптимизациях. </p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>глобальная переменная 1 (<span
  lang=EN-US>defparameter)</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>присваивается новое
  значение</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>глобальная переменная 2 (<span
  lang=EN-US>defvar)</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>если переменная уже была
  переменной, заданной с помощью <span lang=EN-US>defvar</span>, НЕ
  присваивается новое значение, выдаётся предупреждение</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'><span lang=EN-US>defconstant</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>лучше так не делать. Если
  очень надо, сделать <span lang=EN-US>unintern</span> символу из всех пакетов,
  а затем перекомпилировать весь зависимый код</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'><span lang=EN-US>defstruct</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>действует новое
  определение. Экземпляры протухают</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'><span lang=EN-US>defclass</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>действует новое
  определение. Экземпляры остаются с новым определением, но конструктор не
  вызывается заново. </p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'><span lang=EN-US>defmacro</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>действует новое
  определение, но ранее скомпилированный код, в котором используется этот
  макрос, не меняется. Нужно его перекомпилировать.</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'><span lang=EN-US>deftype</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>не знаю. Безопасным будет
  перекомпилировать зависимый код</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'><span lang=EN-US>def</span>ЧтоТо</p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>Любой человек может
  создать своё <span lang=EN-US>def</span>ЧтоТо, см. определение этого <span
  lang=EN-US>def</span>ЧтоТо</p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>пространство имён <span
  lang=EN-US>defpackage</span></p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>сразу вступает в действие
  новое определение. Старые внутренние символы остаются на месте. </p>
  </td>
 </tr>
 <tr>
  <td width=295 valign=top style='width:221.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>система <span lang=EN-US>asdf</span>
  (<span lang=EN-US>defsystem</span>) </p>
  </td>
  <td width=691 valign=top style='width:517.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyTextIndent style='text-indent:0cm'>её не надо
  перекомпилировать. Вместо этого попробуйте её перезагрузить (см. мануал <span
  lang=EN-US>asdf</span><span lang=EN-US> </span>или просто <span lang=EN-US>asdf</span>::!
  ), внимательно глядя на <span style='color:red'>*</span><span lang=EN-US
  style='color:red'>standard</span><span style='color:red'>-</span><span
  lang=EN-US style='color:red'>output</span><span style='color:red'>*</span> В
  сложных случаях проще всего стереть все *.<span lang=EN-US>ofasl</span><span
  lang=EN-US> </span>и перезапустить лисп-систему.</p>
  </td>
 </tr>
</table>

<h3><a name="_Toc346328150">Перекомпиляция файла целиком</a></h3>

<p class=MsoBodyTextIndent>Тоже вполне допустимая практика, если меняли в
нескольких местах. Она покажет такие ошибки, как неверно закрытые скобки и дважды
определённую в одном файле функцию или переменную. В случае ошибки чтения можно
попробовать в отладчике написать <span style='color:blue'>:</span><span
lang=EN-US style='color:blue'>e</span><span style='color:blue'> &lt;</span><span
lang=EN-US style='color:blue'>Enter</span><span style='color:blue'>&gt;</span>,
окрестности ошибки раскрасятся в разные цвета. Также можно щелкать на ворнинги
какой-то кнопкой мыши и, если повезёт, получится увидеть исходник. </p>

<h3><a name="_Toc346328151">Подводные камни динамической разработки и как их
обойти</a></h3>

<p class=MsoBodyTextIndent>Некоторые из них известны в <span lang=EN-US>SQL</span>.
Только один пример. Мы создали функцию <span lang=EN-US>bar</span>, к-рая вызывает
функцию <span lang=EN-US>foo</span>. Потом решили переименовать функцию <span
lang=EN-US>foo</span>, взяли её определение, поменяли в ней имя <span
lang=EN-US>foo</span><span lang=EN-US> </span>на нормальноеИмя и перекомпилировали,
а в функции <span lang=EN-US>bar</span> - забыли поменять. Всё хорошо, но
функция <span lang=EN-US>foo</span><span lang=EN-US> </span>тоже существует в
пространстве имён, и при перекомпиляции функции <span lang=EN-US>bar</span><span
lang=EN-US> </span>никто нам не скажет, что она всё ещё ссылается на <span
lang=EN-US>foo</span>, а не на нормальноеИмя. Проблема всплывёт только при полной
пересборке (а это может быть и через неделю). </p>

<p class=MsoBodyTextIndent>Существует множество других подводных камней
подобного рода, связанных с динамической природой лиспа. </p>

<p class=MsoBodyTextIndent>Не буду объяснять их все, но вот общие рекомендации:
</p>

<p class=MsoBodyTextIndent>1. Макросы, типы данных и глобальные переменные
лучше выделить в отдельный файл, примерно так же, как это делается в <span
lang=EN-US>C</span>. </p>

<p class=MsoBodyTextIndent>2. Желательно дробить программу на как можно более
мелкие пакеты, для этого нужно пользоваться <span lang=EN-US style='color:blue'>def</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>merge</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>packages</span><span
style='color:blue'>::! </span>, т.к. у <span lang=EN-US>defpackage</span><span
lang=EN-US> </span>хватает граблей, связанных с одноимёнными экспортируемыми
символами в разных пакетах и др. </p>

<p class=MsoBodyTextIndent>3. Нужно стараться удалять сущности, которые больше
не нужны. Любая сущность, имя которой есть хотя бы в одном пространстве имён,
пребудет во веки веков (до выхода из программы), даже если на неё нет других ссылок.
Поэтому, для удаления сущности нужно удалить её имя из пространства имён. В
целом удаление символа из пространства имён делается с помощью <span
lang=EN-US>unintern</span>, но это не сработает, если имя содержится в
нескольких пространствах имён или если оно пришло через наследование
пространств имён (:<span lang=EN-US>use</span>). Проверяйте результат <span
lang=EN-US>unintern</span><span lang=EN-US> </span>с помощью средства поиска
символов и не забывайте, что могут быть одноимённые, но различные символы в
разных пакетах.  Идентичность символов проверяется с помощью <span lang=EN-US
style='color:red'>eq</span><span lang=EN-US>. </span></p>

<p class=MsoBodyTextIndent>4. В трудной ситуации можно попробовать удалить (<span
lang=EN-US>delete</span>-<span lang=EN-US>package</span>) пространство имён
целиком. Сначала нужно перейти в другое пр-во имён в <span lang=EN-US>listener</span>-е
и закрыть файлы этого пакета в редакторе, после чего выполнить <span
lang=EN-US>delete</span>-<span lang=EN-US>package</span><span lang=EN-US> </span>и
перекомпилировать все файлы фрагмента, начиная с файла определения пакета. Вряд
ли стоит пытаться это делать, если на данный пакет уже ссылаются другие, в этом
случае см. следующую рекомендацию. </p>

<p class=MsoBodyTextIndent>5. Полная пересборка системы подразумевает удаление
всех <span lang=EN-US>ofasl</span><span lang=EN-US> </span>- файлов, созданных
при пересборке (нужно иметь функцию или <span lang=EN-US>bat</span>-файл, к-рый
это делает) и запускать полную пересборку программы в свежем экземпляре среды. Иногда
сборочный скрипт не включает в себя сборку особо сложных библиотек. Например,
автор почти никогда не пересобирает <span lang=EN-US>ap</span>5. Соответствующие
<span lang=EN-US>ofasl</span>-ы нужно сохранить. </p>

<p class=MsoBodyTextIndent>6. <span lang=EN-US>asdf</span><span lang=EN-US> </span>работает
очень плохо (вроде 2-я версия стала лучше, но точно не знаю). Не полагайтесь на
задание зависимостей внутри системы, используйте в системе ключ :<span
lang=EN-US>serial</span>, а также есть <span lang=EN-US style='color:blue'>asdf</span><span
style='color:blue'>::</span><span lang=EN-US style='color:blue'>undefsystem</span>
, который сбрасывает кеш <span lang=EN-US>asdf</span><span lang=EN-US> </span>для
данной системы и который всегда лучше вызвать, если что-то серьёзно поменялось.
</p>

<h1><a name="_Toc346479875"></a><a name="_Toc346328152">Встроенные типы данных</a></h1>

<h2><a name="_Toc346479876"></a><a name="_Toc346328153">Символы</a></h2>

<p class=MsoNormal>Символ - это структура данных, которая в обычном компиляторе
соответствует идентификатору. В <span lang=EN-US>Delphi</span>, символы
существуют только во время компиляции и в сессии отладчика. В Лиспе символ
доступен программисту. Символ можно создавать во время исполнения и включать в
пространства имён. У символа есть значение (это - значение глобальной
переменной с таким именем),  значение - функция (функция с таким именем),
которая может быть изменена - на этом основана динамическая разработка. Также
символ может означать тип, класс, макрос. К символу можно добавлять свойства,
доступ к которым происходит с помощью <span lang=EN-US>get</span>. Но самое
главное - у символа есть имя, и когда <span style='color:red'>читатель</span>
встречает в тексте нечто, что не является строкой или числом, он считает, что
это символ и возвращает его. Если символа с таким именем нет в текущем
пространстве имён, читатель создаёт такой символ и возвращает.</p>

<h3><a name="_Toc346328154">Регистр символов</a></h3>

<p class=MsoNormal>При чтении, согласно стандарту, имя приводится к верхнему
регистру и печатается в верхнем регистре. Чтобы этого избежать, имя нужно
писать как |<span lang=EN-US>CamelCase</span>|. <span style='color:blue'>В :</span><span
lang=EN-US style='color:blue'>buddens</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>readtable</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>a</span><span style='color:blue'>, если у символа
есть латинские буквы в различном регистре, например, в имени </span><span
lang=EN-US style='color:blue'>CamelCase</span><span style='color:blue'>, то он
не приводится к верхнему регистру. Также настроены переменные конфигурации
чтения таким образом, что имена и вид на печати символов связаны согласно
таблице:</span></p>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=329 valign=top style='width:246.4pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span style='color:blue'>Вводим</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span style='color:blue'>На печати</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span style='color:blue'>Имя
  символа</span></p>
  </td>
 </tr>
 <tr>
  <td width=329 valign=top style='width:246.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>sym</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>sym</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>&quot;SYM&quot;</span></p>
  </td>
 </tr>
 <tr>
  <td width=329 valign=top style='width:246.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>SYM</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>sym</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>&quot;SYM&quot;</span></p>
  </td>
 </tr>
 <tr>
  <td width=329 valign=top style='width:246.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>Sym</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>Sym</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>&quot;Sym&quot;</span></p>
  </td>
 </tr>
 <tr>
  <td width=329 valign=top style='width:246.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>|sym|</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>|sym|</span></p>
  </td>
  <td width=329 valign=top style='width:246.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='color:
  blue'>&quot;sym&quot;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal>Чтобы узнать имя символа и не запутаться в преобразованиях,
можно использовать<span style='color:blue'> </span>(<span lang=EN-US>string</span><span
lang=EN-US> </span>символ). </p>

<h2><a name="_Toc346479877"></a><a name="_Toc346328155">Списки</a></h2>

<p class=MsoNormal>Список, как уже ранее отмечалось - это односвязный список,
построенный из объектов типа <span lang=EN-US style='color:red'>cons</span>. В <span
lang=EN-US>cons</span> два поля - <span lang=EN-US style='color:red'>car</span><span
lang=EN-US> </span>и <span lang=EN-US style='color:red'>cdr</span>. <span
lang=EN-US>car</span><span lang=EN-US> </span>указывает на элемент списка,<span
lang=EN-US>cdr</span> - на хвост. У последнего элемента <span lang=EN-US>cdr</span>
= <span lang=EN-US>nil</span>. Несмотря на то, что односвязный список далеко не
всегда оптимален по быстродействию, его часто используют для хранения
последовательностей объектов, множеств, отображений (словарей). Список можно
примерно считать аналогичным <span lang=EN-US>TList</span>, но он гибче,
поскольку два списка могут иметь общий &quot;хвост&quot;. Одинаковый код
обработки списков на Лиспе оказывается гораздо лаконичнее соответствующего кода
на Дельфи, поскольку:</p>

<p class=MsoNormal>1. В лиспе можно одним оператором создать и заполнить вложенный
список произвольных значений. </p>

<p class=MsoNormal>2. Легко складывать (конкатенировать) списки, сортировать,
искать по произвольному ключу, удалять сразу много значений, делать выборки, осуществлять
теоретико-множественные операции.</p>

<p class=MsoNormal>3. Не нужно следить за памятью.</p>

<p class=MsoNormal>4. Не нужно создавать специальные типы данных для хранения групп
значений  - можно использовать вложенные списки. </p>

<p class=MsoNormal>5. Список объектов, которые имеют внешние текстовое
представление, за одно действие может быть введён/выведен в/из поток(а). В
частности, список всегда легко напечатать и обозреть его содержимое. </p>

<p class=MsoNormal>Как правило, списки всё же используются для относительно
небольших объёмов данных. </p>

<h2><a name="_Toc346479878"></a><a name="_Toc346328156">Массивы и строки</a></h2>

<p class=MsoNormal>Строки являются одномерными массивами букв. В лиспе есть
одномерные и многомерные массивы. Многие функции, работающие для списков,
работают и для одномерных массивов. Массивы могут быть изменяемого размера.
Принципиальное отличие от списков - в том, что операция добавления и вырезания
элемента в массивах могут быть медленнее, а операция доступа по номеру - быстрее.
Массивы могут быть слабыми, т.е. не мешать объекту подвергнуться сборке мусора,
если на него нет других, &quot;сильных&quot; ссылок. Массивы,как и списки,
могут быть напечатаны или прочитаны из потока за одно действие. </p>

<h2><a name="_Toc346479879"></a><a name="_Toc346328157">Хеш-таблицы</a></h2>

<p class=MsoNormal>Хеш-таблицы - это эффективная реализация словаря
(отображения). Ключём может быть строка, число или произвольный объект. Ключи
могут сравниваться по идентичности объекта (<span lang=EN-US>eq</span>-хеш-таблицы)
или по его содержимому (остальные). Хеш-таблица может быть слабой, т.е. не
мешать объекту подвергнуться сборке мусора, если на него нет других,
&quot;сильных&quot; ссылок. Используя объект в качестве слабого ключа в
хеш-таблице, можно, по сути, добавить новое поле к уже существующему объекту,
который мы не можем поменять. Например, таким объектом может быть структура из
начинки реализации Лиспа. Хеш-таблицы могут разделяться между нитями, но их
можно создавать и для использования в одной нити, в этом случае они работают
быстрее. </p>

<h2><a name="_Toc346479880"></a><a name="_Toc346328158">Числа</a></h2>

<p class=MsoNormal>Числа бывают целые с произвольной точностью, дроби и с
плавающей точкой. Результат операций над целыми числами является целым или
дробью, для приведения к плавающей точке нужно использовать (<span lang=EN-US>coerce</span>
1 '<span lang=EN-US>double</span>-<span lang=EN-US>float</span>). Отличаются <span
lang=EN-US>single</span>-<span lang=EN-US>float</span><span lang=EN-US> </span>и
<span lang=EN-US>double</span>-<span lang=EN-US>float</span>, это может вызвать
путаницу. </p>

<h1><a name="_Toc346479881"></a><a name="_Toc346328159">Полиморфные (родовые)
функции, структуры и классы</a></h1>

<h2><a name="_Toc346479882"></a><a name="_Toc346328160">Родовые функции</a></h2>

<p class=MsoNormal>В Дельфи есть виртуальные функции. Такая функция объявляется
в одном (базовом) классе и может перекрываться для его наследников. </p>

<p class=MsoNormal>В зависимости от типа объекта, для которого вызывается
функция, будет реально исполнен разный код. </p>

<p class=MsoNormal>Также в <span lang=EN-US>Delphi</span> есть перегруженные (<span
lang=EN-US>overload</span>) функции, которые исполняются по-разному в
зависимости от типов нескольких аргументов. </p>

<p class=MsoNormal>Но, в отличие от виртуальных функций, выбор той или иной из
набора перегруженных функций определяется типом переменной, а не типом объекта.
Если переменная имеет тип <span lang=EN-US>TObject</span>, а хранится в ней <span
lang=EN-US>TComponent</span>, то будет вызвана перегруженная функция для <span
lang=EN-US>TObject</span>.</p>

<p class=MsoNormal>В Лиспе также есть полиморфные, или <span style='color:red'>родовые
функции. </span>Они похожи на перегруженные тем, что исполняемый код зависит от
типов всех параметров, и похожи на виртуальные функции тем, что тип параметра
определяется не по типам переменных, а по типам объектов, во время исполнения.
Подобно виртуальным методам <span lang=EN-US>Delphi</span>, где можно вызвать <span
lang=EN-US>inherited</span>, в Лиспе можно вызвать &quot;родительский&quot;
метод с помощью <span lang=EN-US>(<span style='color:red'>call-next-method</span>).
</span></p>

<p class=MsoNormal>Основное отличие родовой функции от метода <span lang=EN-US>Delphi</span><span
lang=EN-US> </span>- она не принадлежит объекту! Т<span lang=EN-US>.</span>е<span
lang=EN-US>., </span>вместо <span lang=EN-US>object.method(arg1,arg2) </span>пишем<span
lang=EN-US> (method object arg1 arg2). </span>Внутри определения метода родовой
функции нет неявного <span lang=EN-US>self</span>, обращаться к полям и методам
<span lang=EN-US>object</span><span lang=EN-US> </span>нужно по полному имени с
упоминанием <span lang=EN-US>object</span>. Это может быть неудобным, но такова
наша жизнь.</p>

<p class=MsoNormal>Поскольку код определяется типами нескольких параметров, а
классы имеют множественное наследование, в Лиспе нет однозначного понятия
&quot;родительский&quot;. Реально исполняемый код зависит от типов фактических
параметров по довольно сложному алгоритму. Полное описание алгоритма можно
найти в <span lang=EN-US><a
href="http://lisper.ru/pcl/object-reorientation-generic-functions">Practical Common
Lisp</a></span>. Мы рассмотрим только простые частные случаи. </p>

<h3><a name="_Toc346328161">Основные методы с одним типизированным параметром</a></h3>

<p class=MsoNormal>У методов может быть квалификатор. <span style='color:red'>Основной
метод</span> – это метод, у которого нет квалификатора. Будем для простоты
считать, что для каждого метода функции задан тип только одного аргумента –
первого. Этот случай соответствует не перегруженному виртуальному методу в
Дельфи. Всё работает совершенно аналогично: вызывается метод самого класса или
метод ближайшего предка, а <span lang=EN-US>call</span>-<span lang=EN-US>next</span>-<span
lang=EN-US>metod</span> работает так же, как <span lang=EN-US>inherited</span>.
</p>

<h3><a name="_Toc346328162">Методы со спецификатором </a><span lang=EN-US>eql</span>
</h3>

<p class=MsoNormal>Вместо спецификации типа может быть задан спецификатор <span
lang=EN-US>sql</span>. Это позволяет определять метод не для типов, а для
индивидуальных объектов. </p>

<h3><a name="_Toc346328163">Методы</a><span lang=EN-US> before, after, around</span></h3>

<p class=MsoNormal>Можно задать метод с квалификаторами :<span lang=EN-US>before</span>,
:<span lang=EN-US>after</span>, :<span lang=EN-US>around</span>. Методы <span
lang=EN-US>before</span><span lang=EN-US> </span>и <span lang=EN-US>after</span><span
lang=EN-US> </span>аналогичны триггерам <span lang=EN-US>before</span><span
lang=EN-US> </span>или <span lang=EN-US>after</span><span lang=EN-US> </span><span
lang=EN-US>update</span>. Методы <span lang=EN-US>around</span><span
lang=EN-US> </span>охватывают вызов &quot;вокруг&quot;, и позволяют полностью
его подменить. Рассмотрим случай функции с одним типизированным аргументом.
Методы :<span lang=EN-US>around</span> выполняются в порядке от частного – к
общему, т.е. от <span lang=EN-US>eql</span>, к классу объекта к предкам. При
этом, если где-то не вызвать <span lang=EN-US>call</span>-<span lang=EN-US>next</span>-<span
lang=EN-US>method</span>, то выполнение более &quot;общих&quot; методов (как
обычных, так и <span lang=EN-US>before</span>,<span lang=EN-US>after</span>,<span
lang=EN-US>around</span>) не будет происходить. </p>

<p class=MsoNormal>Методы :<span lang=EN-US>before</span> аналогичны триггеру <span
lang=EN-US>before</span><span lang=EN-US> </span><span lang=EN-US>update</span>,
они выполняются в порядке от частного к общему, изнутри вызова <span
lang=EN-US>around</span>, но до вызова &quot;основных&quot; методов, <span
lang=EN-US>call</span>-<span lang=EN-US>next</span>-<span lang=EN-US>method</span>
вызывать не нужно. Методы :<span lang=EN-US>after</span> выполняются после
основных, внутри <span lang=EN-US>around</span>, в порядке от частного к
общему. </p>

<h2><a name="_Toc346479883"></a><a name="_Toc346328165">Структуры</a></h2>

<p class=MsoNormal>Структура по своим возможностям примерно соответствует
классу в <span lang=EN-US>Delphi</span>, если не считать свойств (<span
lang=EN-US>properties</span>) и ограничения доступа - этого в Лиспе нет. Пример
определения структуры с тремя полями:</p>

<p class=a>(<span lang=EN-US>defstruct</span><span lang=EN-US> </span><span
lang=EN-US>мояСтруктура поле1 поле2 поле3) </span></p>

<p class=MsoNormal>Для такой структуры будет автоматически сгенерирован
конструктор <span lang=EN-US>make</span>-мояСтруктура и три функции для доступа
к полям, мояСтруктура-поле1,2,3 от одного аргумента.</p>

<p class=MsoNormal>Можно задавать для структур типы полей.</p>

<p class=MsoNormal>Каждая структура является классом. Структура может
&quot;включать&quot; в себя другую структуру (родитель) с помощью опции :<span
lang=EN-US>include</span>, (см. помощь для <span lang=EN-US>defstruct</span>), тогда
она становится подклассом родителя в иерархии классов. Поскольку для структур
можно определять родовые функции, можно сделать вывод, что структуры+родовые
функции примерно соответствуют классам Дельфи. </p>

<h3><a name="_Toc346328166">Конструктор</a></h3>

<p class=MsoNormal>Структура пассивна, это - просто набор данных. У неё нет
конструктора, его нужно эмулировать вызовом какой-то функции, написанной
пользователем. </p>

<h3><a name="_Toc346328167">Деструктор</a></h3>

<p class=MsoNormal>Деструкторы в лиспе вообще не водятся. Хотя можно назначить
действие на сборку мусора, (<span lang=EN-US>hcl</span>:add<a
name=marker-1038990></a>-special-free-action), но неизвестно, когда это
действие будет осуществлено, и возможности этого действия весьма ограничены,
т.к. оно вызывается в очень специфических условиях. Поэтому, если объект должен
быть явно «удалён», например, закрыт поток, нужно добавить в объект поле,
характеризующее его состояние, в деструкторе закрывать то, что надо, затем
ставить в поле состояния признак, что объект «убит» и особым образом
обрабатывать такие «убитые» объекты. Действие при сборке мусора, по хорошему,
должно лишь проверять, что объект при сборке мусора был закрыт должным образом,
и сообщать об ошибочной ситуации, если что-то не так.</p>

<h3><a name="_Toc346328168"><span style='color:blue'>Крышечный синтаксис</span></a></h3>

<p class=MsoNormal>Стандарт Лиспа подразумевает довольно многословный синтаксис
обращения к полям структуры. <span style='color:blue'>Крышечный синтаксис </span>позволяет
сделать обращения к полям структур почти столь же лаконичными, как в <span
lang=EN-US>Delphi</span>. Однако, это будет работать только для цепочек типа <span
lang=EN-US>a</span>.<span lang=EN-US>b</span>.<span lang=EN-US>c</span><span
lang=EN-US> </span>и не будет работать для <span lang=EN-US>a</span>.<span
lang=EN-US>b</span>(<span lang=EN-US>args</span>).<span lang=EN-US>c</span>.
Пример см. в пункте про управляющие конструкции.</p>

<h3><a name="_Toc346328169">Ложка дёгтя</a></h3>

<p class=MsoNormal>При переопределении структуры все её экземпляры становятся
инвалидными. </p>

<h2><a name="_Toc346479884"></a><a name="_Toc346328170">Классы</a></h2>

<p class=MsoNormal>Классами автор пользуется мало. Основное их преимущество
перед структурами – их можно переопределять «на лету», так, что все экземпляры
сохраняются. Для классов доступно множественное наследование, могут быть
определены конструкторы. Для классов функция  печати по умолчанию очень убогая,
нужно пользоваться инспектором или писать нужную функцию. Недостатком классов
можно считать то, что родовые функции являются аналогом виртуальных, что
сказывается на производительности. Впрочем, ничто не мешает написать обычную
функцию, оперирующую над экземплярами классов - это будет аналогично
статическим методам. Синтаксис определения класса могуч и многословен.
Повторюсь, родовые функции можно определять не только над классами, но и над структурами
и встроенными типами, так что без классов можно обходиться в большом количестве
случаев. </p>

<p class=MsoNormal>Принять решение о том, использовать класс или структуру, в
основном, нужно принимать, исходя из сложности, необходимости динамического
изменения определения и требований к скорости. Если Ваш тип сложен или его надо
часто менять - используйте класс. Если тип просто и меняется не часто, или если
скорость критична - используйте структуры. </p>

<h3><a name="_Toc346328171">Проблема именования полей и методов</a></h3>

<p class=MsoNormal>В <span lang=EN-US>Delphi</span> каждый класс фактически
определяет пространство имён. Если два класса отличны, то, <span lang=EN-US>T</span>1.<span
lang=EN-US>func</span>() и <span lang=EN-US>T</span>2.<span lang=EN-US>func</span>()
- тоже отличны. В лиспе это - не так. Пространства имён ортогональны иерархии
классов. Отсюда возникает вопрос, как назвать <span lang=EN-US>func</span> в Лиспе?
Её можно назвать <span lang=EN-US>T</span>1-<span lang=EN-US>func</span>, но
тогда при доступе всегда нужно будет писать имя типа - это неудобно. Кроме
того, если у <span lang=EN-US>T</span>1 появится потомок <span lang=EN-US>T</span>1<span
lang=EN-US>Child</span>, нужно будет либо писать новую функцию <span
lang=EN-US>T</span>1<span lang=EN-US>Child</span>-<span lang=EN-US>member</span>,
либо писать (<span lang=EN-US>T</span>1-<span lang=EN-US>member</span><span
lang=EN-US> </span><span lang=EN-US>instance</span>), где <span lang=EN-US>instance</span><span
lang=EN-US> </span>будет типа <span lang=EN-US>T</span>1<span lang=EN-US>Child</span>,
что тоже ведёт к путанице. Приходится учитывать эту особенность при и особенно
тяжело здесь приходится с самыми распространёнными словами, такими, как <span
lang=EN-US>add</span>,<span lang=EN-US>push</span><span lang=EN-US> </span>и
т.п. Один из вариантов решения - создавать иерархии пространств имён, связанные
с иерархиями классов. В любом случае, в среднем, получается более многословно,
чем в <span lang=EN-US>Delphi</span> и с этим надо смириться. </p>

<p class=MsoNormal>В случае структур ситуация упрощается, (только для полей).
Если в стурктуре <span lang=EN-US>T</span>1 есть поле <span lang=EN-US>fld</span>,
автоматически создаётся функция доступа <span lang=EN-US>T</span>1-<span
lang=EN-US>fld</span>. Если создаётся наследник <span lang=EN-US>T</span>1<span
lang=EN-US>Child</span>, то к полю <span lang=EN-US>fld</span><span lang=EN-US>
</span>наследника можно обращаться и через <span lang=EN-US>T</span>1-<span
lang=EN-US>fld</span>, и через <span lang=EN-US>T</span>1<span lang=EN-US>Child</span>-<span
lang=EN-US>fld</span>. <span style='color:blue'>Крышечный синтаксис позволяет
обращаться к полям структур почти так же лаконично, как в </span><span
lang=EN-US style='color:blue'>Delphi</span><span style='color:blue'>: </span><span
lang=EN-US style='color:blue'>instance</span><span style='color:blue'>^</span><span
lang=EN-US style='color:blue'>fld</span><span style='color:blue'>, где </span><span
lang=EN-US style='color:blue'>instance</span><span lang=EN-US style='color:
blue'> </span><span style='color:blue'>может быть </span><span lang=EN-US
style='color:blue'>T</span><span style='color:blue'>1 или </span><span
lang=EN-US style='color:blue'>T</span><span style='color:blue'>1</span><span
lang=EN-US style='color:blue'>Child</span><span style='color:blue'>. Для
достижения хорошей производительности тип переменной должен быть введён конструкцией
</span><span lang=EN-US style='color:blue'>with</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>the</span><span style='color:blue'>1. </span></p>

<p class=MsoNormal>&nbsp;</p>

<h3><a name="_Toc346328172">Пример реализации иерархии классов на структурах
(НЕ ПРОВЕРЕНО!)</a></h3>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>unit relatives; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>type TFather=class</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  s:string; // (</span><span
  style='font-size:9.0pt;font-family:"Courier New"'>в</span><span
  style='font-size:9.0pt;font-family:"Courier New"'> </span><span
  style='font-size:9.0pt;font-family:"Courier New"'>лиспе</span><span
  style='font-size:9.0pt;font-family:"Courier New"'> </span><span
  style='font-size:9.0pt;font-family:"Courier New"'>всё</span><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'> - public)</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  constructor Init; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  procedure SetString(iS:string)</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  function getString:string; virtual; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  end;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>type TChild=class(TFather)</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  function getString:string; override;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>  end;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>implementation</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>procedure TFather.setString(iS:string);</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>{ </span><span style='font-size:9.0pt;
  font-family:"Courier New"'>статический метод</span><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>}</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>s:=iS;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>end;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>function TFather.getString:string; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>result:=s;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>end;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>function TChild.getString:string; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>result:=s+s;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>end;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>end.</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&lt;EOF&gt;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>unit relativesApp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>uses relatives; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>var f:TFather;ch:TChild;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>begin</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>f:=TFather.Create;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>ch:=TFather.Create;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>f.s;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>ch.s;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>f</span><span style='font-size:9.0pt;
  font-family:"Courier New"'>.</span><span lang=EN-US style='font-size:9.0pt;
  font-family:"Courier New"'>setString</span><span style='font-size:9.0pt;
  font-family:"Courier New"'>('</span><span lang=EN-US style='font-size:9.0pt;
  font-family:"Courier New"'>abc</span><span style='font-size:9.0pt;font-family:
  "Courier New"'>'); // вызов статического метода</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>ch.setString('abc'); </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>f.getString; // </span><span
  style='font-size:9.0pt;font-family:"Courier New"'>вызов виртуального метода</span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>ch.getString; </span></p>
  <p class=MsoNormal style='text-indent:0cm'><span lang=EN-US style='font-size:
  9.0pt;font-family:"Courier New"'>end.</span></p>
  </td>
  <td width=493 valign=top style='width:369.65pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt;
  color:blue'>; </span><span style='font-size:9.0pt;color:blue'>файл</span><span
  lang=EN-US style='font-size:9.0pt;color:blue'> relatives/package.lisp </span><span
  style='font-size:9.0pt;color:blue'>весь</span><span style='font-size:9.0pt;
  color:blue'> </span><span style='font-size:9.0pt;color:blue'>пример</span><span
  lang=EN-US style='font-size:9.0pt;color:blue'> - </span><span
  style='font-size:9.0pt;color:blue'>синий</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(def-merge-packages::!
  :relatives</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (:use :cl :budden-tools)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (:export &quot;relatives:TFather</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>   </span><span
  lang=EN-US style='font-size:9.0pt'>relatives</span><span style='font-size:
  9.0pt'>:</span><span lang=EN-US style='font-size:9.0pt'>TFather</span><span
  style='font-size:9.0pt'>-</span><span lang=EN-US style='font-size:9.0pt'>P</span><span
  style='font-size:9.0pt'>    ; всё это надо прописать</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>   </span><span
  lang=EN-US style='font-size:9.0pt'>relatives:make-TFather ; </span><span
  style='font-size:9.0pt'>руками</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>   </span><span
  lang=EN-US style='font-size:9.0pt'>relatives</span><span style='font-size:
  9.0pt'>:</span><span lang=EN-US style='font-size:9.0pt'>TFather</span><span
  style='font-size:9.0pt'>-</span><span lang=EN-US style='font-size:9.0pt'>S</span><span
  style='font-size:9.0pt'>    ; хотя можно автоматизировать</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>   </span><span
  lang=EN-US style='font-size:9.0pt'>relatives:TFather-Init</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  relatives:TFather-SetString</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  relatives:GetString</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  relatives:TChild</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  relatives:make-TChild</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  relatives:TChild-P</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  relatives:TChild-S</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  &quot;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  )</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (:custom-token-parsers budden-tools::convert-carat-to-^)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>  
  )</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&lt;EOF&gt;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt;
  color:blue'>;; </span><span style='font-size:9.0pt;color:blue'>файл</span><span
  lang=EN-US style='font-size:9.0pt;color:blue'> relatives/vars-and-macros.lisp  
  </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(in-package
  :relatives)(in-readtable :buddens-readtable-a)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>;
  </span><span style='font-size:9.0pt'>реализация</span><span style='font-size:
  9.0pt'> </span><span style='font-size:9.0pt'>на</span><span style='font-size:
  9.0pt'> </span><span style='font-size:9.0pt'>структурах</span><span
  lang=EN-US style='font-size:9.0pt'>. </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(defstruct
  TFather </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  S)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>;
  статический метод имитируем обычной функцией. </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>;
  объявляется 1 раз на иерархию</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>(</span><span
  lang=EN-US style='font-size:9.0pt'>defgeneric</span><span lang=EN-US
  style='font-size:9.0pt'> </span><span lang=EN-US style='font-size:9.0pt'>GetString</span><span
  style='font-size:9.0pt'> (</span><span lang=EN-US style='font-size:9.0pt'>self</span><span
  style='font-size:9.0pt'>)) </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>(</span><span
  lang=EN-US style='font-size:9.0pt'>defstruct (TChild </span><span
  style='font-size:9.0pt'>(:</span><span lang=EN-US style='font-size:9.0pt'>include</span><span
  lang=EN-US style='font-size:9.0pt'> </span><span lang=EN-US style='font-size:
  9.0pt'>TFather</span><span style='font-size:9.0pt'>)))</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&lt;</span><span
  lang=EN-US style='font-size:9.0pt'>EOF</span><span style='font-size:9.0pt'>&gt;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt;
  color:blue'>;; </span><span style='font-size:9.0pt;color:blue'>файл</span><span
  lang=EN-US style='font-size:9.0pt;color:blue'> relatives/implementation.lisp</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(in-package
  :relatives)(in-readtable :buddens-readtable-a)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(defun
  TFather-SetString (self iS) ; </span><span style='font-size:9.0pt'>статический</span><span
  lang=EN-US style='font-size:9.0pt'> &quot;</span><span style='font-size:9.0pt'>метод</span><span
  lang=EN-US style='font-size:9.0pt'>&quot;   </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>            
  ; изображаем обычной функцией и даём имя</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>            
  ; класса, где он определён.</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>   </span><span
  lang=EN-US style='font-size:9.0pt'>(proga</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>    
  (with-the1 self TFather self)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>    
  (setf self^S iS) ; </span><span style='font-size:9.0pt'>проверки</span><span
  style='font-size:9.0pt'> </span><span style='font-size:9.0pt'>типа</span><span
  style='font-size:9.0pt'> </span><span style='font-size:9.0pt'>нет</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>    
  ))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(defmethod
  GetString ((self TFather))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (self^S)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  )</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(defmethod
  GetString ((self TChild))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (str++ self^S self^S)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&lt;EOF&gt;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt;
  color:blue'>;; </span><span style='font-size:9.0pt;color:blue'>файл </span><span
  lang=EN-US style='font-size:9.0pt;color:blue'>relatives-app.lisp</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(def-merge-packages::!
  :relatives-app</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (:use :cl :budden-tools :relatives-app)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  (:custom-token-parsers budden-tools::convert-carat-to-^)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'> 
  )</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(in-package
  :relatives-app)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(in-readtable
  :buddens-readtable-a)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>(</span><span
  lang=EN-US style='font-size:9.0pt'>defparameter</span><span style='font-size:
  9.0pt'> *</span><span lang=EN-US style='font-size:9.0pt'>f</span><span
  style='font-size:9.0pt'>* </span><span lang=EN-US style='font-size:9.0pt'>nil</span><span
  style='font-size:9.0pt'>)) ; глоб. переменные не типизированы</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(defparameter
  *ch* nil)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(setf
  *f* (TFather-Init (make-TFather)))</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(setf
  *ch* (TFather-Init (make-TFather)))</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>(</span><span
  lang=EN-US style='font-size:9.0pt'>print</span><span style='font-size:9.0pt'>
  *</span><span lang=EN-US style='font-size:9.0pt'>f</span><span
  style='font-size:9.0pt'>*^</span><span lang=EN-US style='font-size:9.0pt'>S</span><span
  style='font-size:9.0pt'>) ; неэффективно, т.к. не типиз. переменная. </span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>;
  Эквивалентный эффективный вариант </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>;
  (with-the1 f TFather *f* f^S) </span><span style='font-size:9.0pt'>или</span><span
  style='font-size:9.0pt'> </span><span style='font-size:9.0pt'>просто</span><span
  lang=EN-US style='font-size:9.0pt'> (TFather-S *f*)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(print
  *ch*^S)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(TFather-SetString
  *f* &quot;abc&quot;)</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>(</span><span
  lang=EN-US style='font-size:9.0pt'>TFather</span><span style='font-size:9.0pt'>-</span><span
  lang=EN-US style='font-size:9.0pt'>SetString</span><span style='font-size:
  9.0pt'> *</span><span lang=EN-US style='font-size:9.0pt'>ch</span><span
  style='font-size:9.0pt'>* &quot;</span><span lang=EN-US style='font-size:
  9.0pt'>abc</span><span style='font-size:9.0pt'>&quot;)  </span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>&nbsp;</span></p>
  <p class=a style='text-indent:0cm'><span style='font-size:9.0pt'>(</span><span
  lang=EN-US style='font-size:9.0pt'>GetString *f*)</span></p>
  <p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:9.0pt'>(GetString
  *ch*) </span></p>
  </td>
 </tr>
</table>

<h1><a name="_Toc346479885"></a><a name="_Toc346328173"><span lang=EN-US>eval</span><span
lang=EN-US> </span>и макросы</a></h1>

<h2><a name="_Toc346479886"></a><a name="_Toc346328174"><span lang=EN-US>Eval</span></a></h2>

<p class=MsoNormal><span lang=EN-US>Eval</span><span lang=EN-US> </span>предназначен
для динамической генерации и выполнения кода во время выполнения программы. Он
аналогичен командам <span lang=EN-US>SQL</span>: <span lang=EN-US>execute</span><span
lang=EN-US> </span><span lang=EN-US>statement</span>, <span lang=EN-US>exec</span>,
<span lang=EN-US>sp</span>_<span lang=EN-US>execute</span>_<span lang=EN-US>sql</span><span
lang=EN-US> </span>и т.п. Общий смысл - код составляется и выполнятся во время
выполнения. Разница между <span lang=EN-US>SQL</span><span lang=EN-US> </span>и
Лиспом состоит в том, что в <span lang=EN-US>SQL</span><span lang=EN-US> </span>складывются
строки, а в <span lang=EN-US>Lisp</span> происходит обработка деревьев. При
этом часто используется <span style='color:red'>квазицитирование</span>. </p>

<p class=MsoNormal><span lang=EN-US>Eval</span><span lang=EN-US> </span>снижает
производительность и делает программу менее надёжной, поэтому его можно
использовать только там, где это необходимо. Однако, листенер основан именно на
<span lang=EN-US style='color:red'>eval</span> - он вызывает <span lang=EN-US>eval</span><span
lang=EN-US> </span>над формами, которые мы вводим. </p>

<h2><a name="_Toc346479887"></a><a name="_Toc346328175">Макросы</a></h2>

<p class=MsoNormal><span style='color:red'>Макросы</span> аналогичны директивам
препроцессора #<span lang=EN-US>define</span><span lang=EN-US> </span>в <span
lang=EN-US>C</span><span lang=EN-US> </span>и в то же время аналогичны <span
lang=EN-US>eval</span>. Отличие от #<span lang=EN-US>define</span><span
lang=EN-US> </span>состоит в том, что для #<span lang=EN-US>define</span><span
lang=EN-US> </span>доступны 3-4 операции (арифметические действия над
константами, вызов других макросов и две конкатенации). Макрос на лиспе может
проводить любой анализ входных данных (своих аргументов), вызывать любые уже
присутствующие в образе функции и строить подставляемый код из результата их
вызова. Всё это обычно может в интерпретируемых языках <span lang=EN-US>eval</span>
(<span lang=EN-US>execute</span><span lang=EN-US> </span><span lang=EN-US>statement</span>).
Отличие макросов от <span lang=EN-US>eval</span><span lang=EN-US> </span>состоит
в том, что расширение и подстановка макросов обычно происходит на этапе
компиляции, поэтому макросы не замедляют выполнение программы. </p>

<p class=MsoNormal>При определении макросов обычно используется <span
style='color:red'>квазицитирование</span>. Пример макроса приведён в пункте <span
lang=EN-US>try</span>..<span lang=EN-US>finally</span>.</p>

<h3><a name="_Toc346328177">Преимущества и недостатки</a></h3>

<p class=MsoNormal>Преимущество - возможность создания новых конструкций языка
с неограниченными возможностями. Например, препроцессор <span lang=EN-US>SQL</span><span
lang=EN-US> </span>с поиском ошибок во время компиляции, о котором говорилось
выше. Недостаток - макросы затрудняют или делают невозможной пошаговую отладку.
Степпер предлагает расширять макросы, когда он их встречает, но поствить
брекпойнт в нерасширенный макрос не всегда можно. Иногда нелегко найти и ошибку
в исходном тексте, полученном в резлультате макрорасширения (для этого нужно
использовать <span lang=EN-US style='color:red'>macroexpand</span><span
lang=EN-US style='color:red'> </span>или трассировать макрос). </p>

<h1><a name="_Toc346479888"></a><a name="_Toc346328178">Отладка</a></h1>

<h2><a name="_Toc346479889"></a><a name="_Toc346328179">Три отладчика</a>:
консольный, жук и степпер</h2>

<p class=MsoNormal style='text-indent:18.0pt'>Консольный и графический отладчик
работают координированно над одним и тем же стеком, эта пара является основным
средством интерактивной отладки. Степпер используется довольно редко.  Часто
применяется логгирование как полезное средство отладки. </p>

<h2><a name="_Toc346328180"></a><a name="_Toc346479890">Для отладки поместите
код в файл</a></h2>

<p class=MsoNormal>Лисп позволяет определять и компилировать функции прямо в
листенере. Одна из основных функций отладчика - показать место в исходнике, где
случилась ошибка. Для этого функция должна быть определена в файле, а файл -
скомпилирован и загружен (например, с помощью команды меню <span lang=EN-US>File</span>/<span
lang=EN-US>Compile</span><span lang=EN-US> </span><span lang=EN-US>and</span><span
lang=EN-US> </span><span lang=EN-US>load</span>). Если в процессе отладки в код
вносятся правки, действуйте согласно главе &quot;Динамическая разработка,
основные сценарии&quot;.  </p>

<h2><a name="_Toc346479891">Изучение состояния программы</a> в отладчике</h2>

<h3><a name="_Toc346328181">Просмотр стека. Настройка отображения кадров стека</a></h3>

<p class=MsoBodyTextIndent>Можно просматривть стек и переменные в нём. Для
переменных можно вызывать инспектор. Также можно просматривать в инспекторе
функцию, в которой произошёл останов, с помощью пункта <span lang=EN-US>inspect</span><span
lang=EN-US> </span><span lang=EN-US>function</span>, в т.ч. её ассемблерный
листинг. В меню &quot;<span lang=EN-US>view</span>&quot; жука можно выбрать
отображение тех или иных кадров стека. По умолчанию отладчик показывает лишь небольшую
часть из них. </p>

<h3><a name="_Toc346328182">Инспектор</a></h3>

<p class=MsoBodyTextIndent>Инспектор аналогичен инспектору в <span lang=EN-US>Delphi</span>
- он позволяет ходить по внутренней структуре объекта. </p>

<p class=MsoBodyTextIndent>В нормальных условиях инспектор вызывается нажатием
иконки с микроскопом в листенере. В этом случае он показывает содержимое последнего
результата вычисления. В графическом отладчике - &quot;жуке&quot; инспектор
вызывается при двойном щелчке нажатии на любую переменную стека. Для возврата
на предыдущий уровень структуры есть кнопка &quot;назад&quot;, как в
веб-браузере. </p>

<h2><a name="_Toc346479892"></a><a name="_Toc346328183">Листенер во время
отладки</a></h2>

<p class=MsoBodyTextIndent>В любое время, листенер позволяет вызывать функции и
вычислять значения глобальных переменных. Если Вы находитесь в отладчике (см.
&quot;Отладчик очень близко&quot;), то листенер позволяет делать вычисления в
контексте текущего кадра стека. Это аналогично окну <span lang=EN-US>Evaluate</span>/<span
lang=EN-US>Modify</span><span lang=EN-US> </span>в отладчике <span lang=EN-US>Delphi</span>,
но без присущих <span lang=EN-US>Delphi</span><span lang=EN-US> </span>ограничений.
Например, можно в отладчике определить новую функцию. Если в графическом
отладчике (&quot;жуке&quot;) Вы выделили одинарным щелчком другой кадр стека,
то будут видны переменные этого кадра и над ними можно будет делать вычисления.
Но пространство имён при этом не переключается, поэтому может понадобиться
писать префикс пространства имён перед пакетом. </p>

<p class=MsoBodyTextIndent>При пошаговом исполнении листенер тоже доступен, но
он какой-то странный и автор им почти не пользуется. Например, неясно, каков
текущий пакет. Научите. </p>

<h2><a name="_Toc346479893"></a><a name="_Toc346328184">Разновидности ошибок и
их локализация</a></h2>

<p class=MsoBodyTextIndent>В Дельфи бывает два вида ошибок по времени их
возникновения - ошибки компиляции и ошибки исполнения. В <span lang=EN-US>CL</span>
жизненный цикл программы устроен гораздо сложнее, поэтому перечислим эти виды и
способы их локализации. Напомним порядок обработки каждого файла программы:
чтение-компиляция-загрузка компилированного кода-выполнение, причём эти фазы
могут происходить в разных образах Лисп-системы. </p>

<h3><a name="_Toc346328185">Ошибки чтения</a></h3>

<p class=MsoBodyTextIndent>Они возникают в функции <span lang=EN-US>read</span>.
Соответственно, если среда говорит об ошибке и неглубоко по стеку Вы видите
функцию <span lang=EN-US>read</span>, то это - ошибка чтения. В кадре стека
ошибки есть переменная <span lang=EN-US>system</span>::<span lang=EN-US>eargs</span>,
и в ней есть поток. Инспектируя поток, можно понять имя файла. Делая <span
lang=EN-US>read</span>-<span lang=EN-US>line</span> этому потоку, можно
попробовать прочитать продолжение файла после места ошибки. <span lang=EN-US
style='color:blue'>editor</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>budden</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>tools</span><span style='color:blue'>::</span><span
lang=EN-US style='color:blue'>edit</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>stream</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>position</span><span lang=EN-US style='color:
blue'> </span><span style='color:blue'>открывает файл в том месте, где чтение
прервалось. С таблицей чтения </span><span lang=EN-US style='color:blue'>buddens</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>readtable</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>a</span><span
lang=EN-US style='color:blue'> </span><span style='color:blue'>можно
использовать в отладчике команду :</span><span lang=EN-US style='color:blue'>e</span><span
lang=EN-US style='color:blue'> </span><span style='color:blue'>для вызова
специального просмотровщика ошибок чтения, к-рый раскрасит файл в цвета по
уровням вложенности. </span>Также можно заполнить файл отладочным выводом: #.(<span
lang=EN-US>print</span> &quot;уникальная метка&quot;) и методом половинного
деления найти место, в котором случилась ошибка. </p>

<h3><a name="_Toc346328186">Ошибки компиляции</a></h3>

<p class=MsoNormal>Во многих случаях среда (в консоли) предлагает <span
lang=EN-US>edit</span><span lang=EN-US> </span><span lang=EN-US>source</span><span
lang=EN-US> </span><span lang=EN-US>where</span><span lang=EN-US> </span><span
lang=EN-US>error</span><span lang=EN-US> </span><span lang=EN-US>occured</span>.
Также можно установить переменную *<span lang=EN-US>compile</span>-<span
lang=EN-US>print</span>* в <span lang=EN-US>t</span>,но это не поможет, если в
файле много форм, являющихся макросами, определёнными пользователем. В этом
случае, вместо имени функции, среда напечатает &quot;(<span lang=EN-US>top</span>-<span
lang=EN-US>level</span>-<span lang=EN-US>form</span><span lang=EN-US> </span><span
lang=EN-US>NNN</span>)&quot;. Можно попробовать установить трассировку на <span
lang=EN-US>compiler</span>::<span lang=EN-US>process</span>-<span lang=EN-US>form</span>.
Самый общий способ основан на отладочном выводе: локализуйте ошибку, расставляя
в файле формы верхнего уровня (eval-when (:compile-toplevel) (print &quot;уникальная
метка&quot;)).</p>

<h3><a name="_Toc346328187">Ошибки загрузки</a></h3>

<p class=MsoNormal>Аналогичным образом, можно искать ошибку с помощью расстановки
форм (eval-when (:<span lang=EN-US>load</span>-toplevel) (print &quot;уникальная
метка&quot;))</p>

<h2><a name="_Toc346479894"></a><a name="_Toc346328188">Трассировка и отладка </a><span
lang=EN-US>print-</span>ами</h2>

<p class=MsoNormal>Трассировка очень удобна, т.к. она показывает параметры и
возвращающие значения любого множества функций, отображая глубину вложенности
стека отступами. Можно трассировать обычную функцию, родовую функцию или её отдельные
методы, а также <span style='color:red'>макросы</span>. Для трассировки обычной
ф-ии пишем (<span lang=EN-US style='color:red'>trace</span><span lang=EN-US> </span>имя),
нажимаем <span lang=EN-US>ctrl</span>-<span lang=EN-US>alt</span>-<span
lang=EN-US>t</span><span lang=EN-US> </span>на её имени или выбираем
трассировку в контектном меню. Перекомпилировать функцию не нужно. Можно
делать  трассировку с (<span lang=EN-US style='color:red'>break</span>)  - в
этом случае исполнение прервётся при входе. Трассировку методов можно делать
через <span lang=EN-US>Works</span>/<span lang=EN-US>Tools</span>/<span
lang=EN-US>Generic</span><span lang=EN-US> </span><span lang=EN-US>function</span><span
lang=EN-US> </span><span lang=EN-US>browser</span>, выбирая методы и вызывая
для каждого из них контекстное меню. Для выключения трассировки всех функций выполняем
(<span lang=EN-US>untrace</span>). Аналогичным трассировке методом является
отладочная печать. <span lang=EN-US style='color:blue'>Show</span><span
style='color:blue'>-</span><span lang=EN-US style='color:blue'>expr</span><span
lang=EN-US style='color:blue'> </span>позволяет выводить само выражение и его
значение. </p>

<h2><a name="_Toc346479895"></a><a name="_Toc346328189">Остановы и пошаговое
исполнение</a></h2>

<p class=MsoNormal>Надёжным способом установки точки прерывания является
вставка в нужное место кода вызова (<span lang=EN-US style='color:red'>break</span>)
<span lang=EN-US>c</span><span lang=EN-US> </span>последующей перекомпиляцией
функции. При таком способе останова нельзя из режима останова перейти в режим
пошагового исполнения. Негусто, но радуемся тому, что можно перекомпилировать
по одной функции, поэтому затраты времени на установку (<span lang=EN-US>break</span>)
невелики. </p>

<p class=MsoNormal>Теоретически, в коде можно ставить точки останова, нажав на
красную кнопку с кружком в начале формы, где хотим остановиться. Эта
возможность запускает пошаговый отладчик. Всё бы хорошо, но <span lang=EN-US>iterate</span>
и <span lang=EN-US style='color:blue'>proga</span><span lang=EN-US> </span>так
меняют код, что эта возможность становится почти везде недоступной - среда не
умеет ставить точки останова в коде, подвеграющемся макрорасширению. </p>

<h2><a name="_Toc346479896"></a><a name="_Toc346328190"><span lang=EN-US>Assert</span></a>,
<span lang=EN-US style='color:blue'>with</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>the</span><span style='color:blue'>1</span></h2>

<p class=MsoNormal><span lang=EN-US style='color:red'>Assert</span><span
lang=EN-US> </span>означает то же, что в <span lang=EN-US>Delphi</span><span
lang=EN-US> </span>и им нужно пользоваться как можно более интенсивно. <span
lang=EN-US style='color:blue'>With</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>the</span><span style='color:blue'>1</span> сочетает
в себе связывание локальной переменной, декларацию типа и его проверку. </p>

<h2><a name="_Toc346479897"></a><a name="_Toc346328191"><span lang=EN-US>Unit</span></a>-тестирование</h2>

<p class=MsoNormal><span lang=EN-US>Unit</span>-тестирование в лиспе не
составляет затруднений благодаря его устройству. Автор пользуется собственным
(очень легковесным) средством определения тестов, <span lang=EN-US
style='color:blue'>def</span><span style='color:blue'>-</span><span lang=EN-US
style='color:blue'>trivial</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>test</span><span style='color:blue'>::! </span>В
серьёзных системах тесты размещаются в отдельных <span lang=EN-US>asdf</span>-системах,
но автор обычно разрабатывает код стремительно и для экономии сил помещает
тесты прямо в исходные тексты; тесты выполняются во время загрузки. Заодно
тесты служат примерами использования кода.</p>

<h2><a name="_Toc346479898"></a><a name="_Toc346328192">Профайлер</a></h2>

<p class=MsoNormal>Он есть в <span lang=EN-US>Lispworks</span>.</p>

<h2><a name="_Toc346479899"></a><a name="_Toc346328193"><span style='color:
blue'>Трассировка </span></a><span lang=EN-US style='color:blue'>SQL</span></h2>

<p class=MsoNormal><span style='color:blue'>Для печати в консоль всех
выполнямых </span><span lang=EN-US style='color:blue'>sql</span><span
style='color:blue'>-запросов надо установить в </span><span lang=EN-US
style='color:blue'>t</span><span lang=EN-US style='color:blue'> </span><span
style='color:blue'>глобальную переменную </span><span lang=EN-US
style='color:blue'>*trace-firebird*.</span></p>

<p class=MsoPlainText style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<h1><a name="_Toc346479900">Контрольные вопросы и практические задания</a></h1>

<p class=MsoBodyText>Для практических заданий нужно:</p>

<p class=MsoBodyText>- <span lang=EN-US>Windows</span> (в <span lang=EN-US>XP </span>точно
работает)</p>

<p class=MsoBodyText><span lang=EN-US>- Lispworks 6.0 Personal Edition </span></p>

<p class=MsoBodyText>- <a href="http://code.google.com/p/def-symbol-readmacro/"><span
lang=EN-US>http</span>://<span lang=EN-US>code</span>.<span lang=EN-US>google</span>.<span
lang=EN-US>com</span>/<span lang=EN-US>p</span>/<span lang=EN-US>def</span>-<span
lang=EN-US>symbol</span>-<span lang=EN-US>readmacro</span>/</a> (см. W<span
lang=EN-US>iki</span> &quot;Установка и загрузка&quot;) </p>

<p class=MsoBodyText>- <span lang=EN-US>TeamViewer</span><span lang=EN-US> </span>для
демонстраций</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>1. <span lang=EN-US>assert</span>, <span
lang=EN-US>trace</span>, <span lang=EN-US>break</span>, макросы, <span
lang=EN-US>macroexpand</span>, квазицитирование, основной метод, родовая
функция, <span lang=EN-US>call</span>-<span lang=EN-US>next</span>-<span
lang=EN-US>method</span>, <span lang=EN-US>cons</span>, <span lang=EN-US>car</span>,
<span lang=EN-US>cdr</span>, <span lang=EN-US>eq</span>, *<span lang=EN-US>standard</span>-<span
lang=EN-US>output</span>*, <span lang=EN-US>listener</span>, <span lang=EN-US>lambda</span>,
<span lang=EN-US>defpackage</span>, <span lang=EN-US>progn</span>, <span
lang=EN-US>defmacro</span>, <span lang=EN-US>funcall</span>, <span lang=EN-US>let</span>,
<span lang=EN-US>defparameter</span>, <span lang=EN-US>defvar</span>, список, переход
от закрывающей к открывающей скобке и обратно, удаление списка до или после
курсора в буфер обмена, переход на следующий/предыдущий список, <span
lang=EN-US>print</span>, <span lang=EN-US>read</span>, символ, пакет, <span
lang=EN-US>defun</span>, <span lang=EN-US>defgeneric</span>, <span lang=EN-US>defmethod</span>,
<span lang=EN-US>setf</span>, <span lang=EN-US>cond</span>, <span lang=EN-US>defstruct</span>,
<span lang=EN-US>defclass</span>, <span lang=EN-US>coerce</span>, <span
lang=EN-US>prin</span>1-<span lang=EN-US>to</span>-<span lang=EN-US>string</span>,
<span lang=EN-US>read</span>-<span lang=EN-US>from</span>-<span lang=EN-US>string</span>,
<span lang=EN-US>parse</span>-<span lang=EN-US>integer</span>, <span
lang=EN-US>string</span>, <span lang=EN-US>format</span> - знать определения
всех понятий и зачем это нужно. Про каждое понятие указать 1-2 прочитанных Вами
источника, где оно описано (письменно) и быть готовым ответить на вопросы по
этим источникам.</p>

<p class=MsoNormal><span style='color:red'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'>2. Каким типом обозначается
&quot;любой объект&quot;. </p>

<p class=MsoNormal style='text-indent:0cm'>3. Продемонстрировать через <span
lang=EN-US>TeamViewer</span><span lang=EN-US> </span>процесс поиска
документации на слово <span lang=EN-US>eql</span><span lang=EN-US> </span>в <span
lang=EN-US>IDE</span><span lang=EN-US> </span><span lang=EN-US>Lispworks</span>,
а также в <b><span lang=EN-US><a
href="http://filonenko-mikhail.github.com/cltl2-doc-ru/"><span lang=RU>Язык
Common Lisp Второе издание</span></a></span></b></p>

<p class=MsoNormal style='text-indent:0cm'>3. Создать <span lang=EN-US>asdf</span>-систему
<span lang=EN-US>test</span>3, с пакетом :<span lang=EN-US>test</span>3,
включающую файл <span lang=EN-US>test</span>3.<span lang=EN-US>lisp</span> со
следующими функциями</p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>(defun f1 (x) </span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>   (+ x 1))</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>(defun f2 (y)</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>   (+ 4 (f1
&quot;4&quot;)))</span></p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>функция <span lang=EN-US>f</span>2 должна
быть экспортируемой. </p>

<p class=MsoNormal style='text-indent:0cm'>Вызвать функцию <span lang=EN-US>f</span>2
с параметром 5 из <span lang=EN-US>Listener</span>.  </p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>Продемонстрировать локализацию
ошибки с помощью жука. Объяснить, почему она произошла. </p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>4. </span>Загрузить
<span lang=EN-US>swank (SLIME). </span>Используя функцию <span lang=EN-US>swank</span>-<span
lang=EN-US>backend</span>::<span lang=EN-US>generic</span>-<span lang=EN-US>function</span>-<span
lang=EN-US>p</span>, вывести список всех методов всех родовых функций, определённых
в системе в виде именованных функций. Каждый метод должен входить в список один
раз. Использовать <span lang=EN-US>list-all-packages, do-symbols, fboundp, symbol-function,
remove-duplicates. </span></p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>5. С помощью инспектора просмотреть
родовую функцию <span lang=EN-US>print</span>-<span lang=EN-US>object</span>. Просмотреть
любой метод и его ассемблерный листинг (продемонстрировать). Попытаться
написать функцию, возвращающую по методу его ассемблерный листинг. См. <span
lang=EN-US>disassemble</span>, <span lang=EN-US>find</span>-<span lang=EN-US>method</span>,
<span lang=EN-US>slot</span>-<span lang=EN-US>value</span>. Может не
получиться,поэтому не тратьте на это задание более 4 часов. В любом случае,
должен получиться какой-то промежуточный результат и его нужно представить в
качестве результата выполнения задания. </p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>6. </span>Трассировать
функцию <span lang=EN-US>lispworks-tools::directory-search-internal-search </span>с
прерыванием<span lang=EN-US> (trace with break). </span></p>

<p class=MsoNormal style='text-indent:0cm'>Вызвать средство поиска в файлах,
задать способ поиска &quot;<span lang=EN-US>Root</span><span lang=EN-US> </span><span
lang=EN-US>and</span><span lang=EN-US> </span><span lang=EN-US>Patterns</span>&quot;
и посмотреть, как работает эта функция.</p>

<p class=MsoNormal style='text-indent:0cm'>С помощью <span lang=EN-US
style='color:blue'>decorate</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>function</span><span style='color:blue'>::</span><span
lang=EN-US style='color:blue'>decorate</span><span style='color:blue'>-</span><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> </span>попробовать
подставить свой список каталогов вместо введённого пользователем. </p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>7. а) Переделать пример из главы <span
lang=EN-US>Overload</span>, чтобы поиск был с учётом регистра букв. </p>

<p class=MsoNormal style='text-indent:0cm'>    б) то же самое, но без учёта
регистра букв не только латиницы, но и кириллицы (использовать <span
style='color:blue'>russian-budden-tools::char-equal-cyr</span>)</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'>8. Написать функцию, которая от
суммы первого, третьего, ... параметров вычитает сумму второго, четвёртого, ...
</p>

<p class=MsoNormal style='text-indent:0cm'>С использованием &amp;<span
lang=EN-US>rest</span>. Внимание! Никакая функция с &amp;<span lang=EN-US>rest</span><span
lang=EN-US> </span>не должна разрушать свой список параметров - это приводить к
непредсказуемым последствиям. </p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>9. Реализовать перечислимый тип.
Должно получиться так<span lang=EN-US>:</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(def-enum-type
TWeekDays (Monday Tuesday Wednesday Thursday Friday Saturday Sunday))</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>TWeekDays</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(typep
'Monday 'TWeekDays)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>t</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(ord
'Monday)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>0</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(succ
'Monday)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>Tuesday</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(GetEnumName
'TWeekDays 0)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>Monday</span></p>

<pre>&nbsp;</pre>

<p class=MsoNormal style='text-indent:0cm'>Также должна быть конструкция <span
lang=EN-US>enum</span>-<span lang=EN-US>case</span>, аналогичная <span
lang=EN-US>case</span>, которая допускает в качестве ключей и своего аргумента
только символы из перечисления, </p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(enum-case
('Monday TWeekDays)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
(Monday &quot;</span><span style='font-size:10.0pt'>Понедельник</span><span
lang=EN-US style='font-size:10.0pt'>&quot;)</span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>    </span><span
lang=EN-US style='font-size:10.0pt'>(t </span><span style='font-size:10.0pt'>&quot;Другой
день&quot;))</span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&quot;Понедельник&quot;</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&nbsp;</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(enum-case
('Monday TWeekDays)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>  
(0 &quot;</span><span style='font-size:10.0pt'>Понедельник</span><span
lang=EN-US style='font-size:10.0pt'>&quot;)</span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>   (</span><span
lang=EN-US style='font-size:10.0pt'>t</span><span lang=EN-US style='font-size:
10.0pt'> </span><span style='font-size:10.0pt'>&quot;Другой день&quot;))</span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>; ошибка во
время макрорасширения</span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>&gt;(enum-case
('cons TWeekDays) </span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
(Monday &quot;</span><span style='font-size:10.0pt'>Понедельник</span><span
lang=EN-US style='font-size:10.0pt'>&quot;)</span></p>

<p class=a style='text-indent:0cm'><span lang=EN-US style='font-size:10.0pt'>   
</span><span style='font-size:10.0pt'>(</span><span lang=EN-US
style='font-size:10.0pt'>t</span><span lang=EN-US style='font-size:10.0pt'> </span><span
style='font-size:10.0pt'>&quot;Другой день&quot;))</span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>; ошибка во
время выполнения </span></p>

<p class=a style='text-indent:0cm'><span style='font-size:10.0pt'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'>Особенности реализации:</p>

<p class=MsoNormal style='text-indent:0cm'>Числовое значение перечисления хранится
в <span lang=EN-US>property</span><span lang=EN-US> </span><span lang=EN-US>list</span><span
lang=EN-US> </span>(списке свойств, <a
href="http://filonenko-mikhail.github.com/cltl2-doc-ru/clmse54.html#x69-94200010.1">http://filonenko-mikhail.github.com/cltl2-doc-ru/clmse54.html#x69-94200010.1</a>)
символа, имя свойства - это имя типа перечисления.</p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>def</span>-<span
lang=EN-US>enum</span>-<span lang=EN-US>type</span><span lang=EN-US> </span>должно
разворачиваться в <span lang=EN-US>progn</span>, который:</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>1. </span>делает <span
lang=EN-US>(deftype TWeekDays () '(member Monday Tuesday ...))</span></p>

<p class=MsoNormal style='text-indent:0cm'>2. для каждого символа проверяет,
что он ещё не является элементом другого перечисления (через перебор списка
свойств)</p>

<p class=MsoNormal style='text-indent:0cm'>3. назначает в <span lang=EN-US>property</span><span
lang=EN-US> </span><span lang=EN-US>list</span><span lang=EN-US> </span>числовое
значение. </p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'>Функция <span lang=EN-US>Ord</span><span
lang=EN-US> </span>должна быть обычной (не родовой) функцией. </p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>enum</span>-<span
lang=EN-US>case</span><span lang=EN-US> </span>должно делать <span lang=EN-US>check</span>-<span
lang=EN-US>type</span><span lang=EN-US> </span>во время компиляции для каждого
ключа. Она должна расширяться в конструкцию, которая делает <span lang=EN-US>check</span>-<span
lang=EN-US>type</span><span lang=EN-US> </span>для аргумента и расширяется в <span
lang=EN-US>case</span>.</p>

<p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>

</div>

</body>

</html>

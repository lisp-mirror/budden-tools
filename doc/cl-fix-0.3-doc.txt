;;; -*- Encoding: utf-8; -*-
This library contains: 

- per-package package nicknames,
for (at least) Lispworks, Allegro, CCL, CLISP and SBCL. 

- def-symbol-readmacro. Usually you assign readmacros
to characters. But there are just too few characters. 
Now you can assign readmacros to symbols, too, so there
is an unlimited space for making your DSLs with custom
syntax.

- def-merge-packages::!
resolve some kinds of symbol clashes 
automatically. There are two policies, 
one is safer (import neither of clashing 
symbols), other is "denser" (import first 
of them). This small macro in conjunction
with readtable extensions simplifies 
a task of managing multiple small 
packages and thus helps improve modularity

- "advanced" readtable case:
You can assign "advanced" readtable-case to 
your readtable so that:
(read-from-string "sym") is SYM
(read-from-string "SYM") is SYM
but
(read-from-string "CamelCase") is |CamelCase|)
see budden-tools::readtable-case-advanced
There are some caveats with keywords and a bug
with uninterned symbols. 

- forbidden symbol names. You can explicitly
state that some symbol name is forbidden in a package.
After that, reader errs when that symbol is attempted
to be read into the package.

- interning to another package with package::symbol
can be forbidden

- custom token parsers. Run your code
when reader finds "PACKAGE-QUALIFIER:" in 
a stream. 

- proga. Get rid of some 
parens and nestings. Instead
of
 
(let ((a b))
 (flet ((f (x) y))
  (with-open-file (f "v" ...)
   (f a))

write just

(proga
 (let a b)
 (flet f (x) y)
 (with-open-file f "v" ...)
 (f a))

which is easier to read and
write (when you get used to it). 

- iterate-keywords (need to be 
downloaded from http://sourceforge.net/projects/iteratekeywords/
)
now you need to import just only
one symbol to use iterate in 
your package. Use keywords as clause heads. 
(iter (:for ...)) 

Usage
-----
(asdf::oos 'asdf:load-op :budden-tools)
#+YouAreRussian (asdf::oos 'asdf:load-op :russian-budden-tools)

#+YouAreRussian 
(setf budden-tools::*def-symbol-reamacro-additional-name-starting-characters*
      (append budden-tools::*def-symbol-reamacro-additional-name-starting-characters*
              russian-budden-tools::*cyrillic-characters*))

(budden-tools:see-packages-on :buddens-readtable-a)
(setf (budden-tools::readtable-case-advanced :buddens-readtable-a) :upcase-if-uniform)
(budden-tools::in-readtable :buddens-readtable-a)
#+lispworks6 (setf *print-case* :downcase)
#+lispworks6 (setf SYSTEM:*PRINT-SYMBOLS-USING-BARS* t)


Caveats/bugs
------------
When advanced-readtable-case is :upcase-if-uniform, #:foo used to 
as #:|foo|. This seem to be fixed now. 
In a #-non-existent-symbol, nested conditionals some times go wrong. 
Any symbol or package which name starts with . can't be interpreted
by the reader correctly. Package aliases for that names are not resolved,
case transformation is not accomplished. This is because . is used for
reading conses. This issue can be resolved by redefining macro-character
for #\( properly, but this was not done. 

Portability issues
------------------
Some time ago, this code passed all tests in SBCL,CCL,Allegro and CLISP.
Now it is used in lispworks 4.4.6 for Windows only. 

Related work
------------
Hierarchical packages by Allegro - are incompatible to this library.
Hierarchicl packages rely on package nicknames like ".subpackage".
It was not possible at the time of the development of budden-tools 
to assign macro-char for #\. (see caveats/bugs). 

Named readtables - Stolen and included into this library.

IDE/Completion
--------------
THis code is hardly usable without IDE support. Completion is done for lispworks only. 
This should be easy to port that to SLIME, I dont' know about Allegro. 

in-package/find-package
-----------------------
When using local-package-nicknames, it can be possible to arrange that
current-package>(in-package :local-nickname-for-another-package-in-current-package)
would work. It is possible if:

i) implementation's reader calls (symbol-function find-package). This seem to
be true for SBCL,Allegro,Lispworks,CCL and to be false for ECL and CLISP.
If your implementation support this, you just load some portions of 
see-packages-lw-edit.lisp into your init file. 

ii) you (not me) write your own in-package and shadowing-import it to your
package. This could be simply 
(defun my:in-package (name) 
  (cl-user::in-package (apply budden-tools::hp-find-package name *package*)))




